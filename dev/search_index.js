var documenterSearchIndex = {"docs":
[{"location":"mpc/examples/#MPC-Examples","page":"MPC Examples","title":"MPC Examples","text":"","category":"section"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"The MPC capability provided by REopt is essentially the optimal sizing and dispatch capability that REopt is commonly used for, but with the sizing problem removed. Also, the MPC model can be built for an arbitrary time length, or \"horizon\" (whereas a REopt model always includes an entire calendar year). The MPC model also requires the user to provide load and resource forecasts as inputs (whereas the typical REopt model allows one to use built-in load profiles as well as other API's such as PVWatts for the solar resource). ","category":"page"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"using REopt, JuMP, Cbc\nmodel = Model(Cbc.Optimizer)\nresults = run_mpc(model, \"./test/scenarios/mpc.json\")","category":"page"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"See mpc.json for details on the Scenario.","category":"page"},{"location":"reopt/outputs/#Outputs","page":"Outputs","title":"Outputs","text":"","category":"section"},{"location":"reopt/outputs/#Financial-outputs","page":"Outputs","title":"Financial outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_financial_results","category":"page"},{"location":"reopt/outputs/#REopt.add_financial_results","page":"Outputs","title":"REopt.add_financial_results","text":"Financial results keys:\n\nlcc Optimal lifecycle cost\nlifecycle_generation_tech_capital_costs LCC component. Net capital costs for all generation technologies, in present value, including replacement costs and incentives. This value does not include offgridothercapital_costs.\nlifecycle_storage_capital_costs LCC component. Net capital costs for all storage technologies, in present value, including replacement costs and incentives. This value does not include offgridothercapital_costs.\nlifecycle_om_costs_after_tax LCC component. Present value of all O&M costs, after tax. (does not include fuel costs)\nlifecycle_fuel_costs_after_tax LCC component. Present value of all fuel costs over the analysis period, after tax.\nlifecycle_chp_standby_cost_after_tax LCC component. Present value of all CHP standby charges, after tax.\nlifecycle_elecbill_after_tax LCC component. Present value of all electric utility charges, after tax. \nlifecycle_production_incentive_after_tax LCC component. Present value of all production-based incentives, after tax.\nlifecycle_offgrid_other_annual_costs_after_tax LCC component. Present value of offgridotherannual_costs over the analysis period, after tax. \nlifecycle_offgrid_other_capital_costs LCC component. Equal to offgridothercapital_costs with straight line depreciation applied over analysis period. The depreciation expense is assumed to reduce the owner's taxable income.\nlifecycle_outage_cost LCC component. Expected outage cost. \nlifecycle_MG_upgrade_and_fuel_cost LCC component. Cost to upgrade generation and storage technologies to be included in microgrid, plus expected microgrid fuel costs, assuming outages occur in first year with specified probabilities.\nlifecycle_om_costs_before_tax Present value of all O&M costs, before tax.\nyear_one_om_costs_before_tax Year one O&M costs, before tax.\nyear_one_om_costs_after_tax Year one O&M costs, after tax.\nlifecycle_capital_costs_plus_om_after_tax Capital cost for all technologies plus present value of operations and maintenance over anlaysis period. This value does not include offgridothercapital_costs.\nlifecycle_capital_costs Net capital costs for all technologies, in present value, including replacement costs and incentives. This value does not include offgridothercapital_costs.\ninitial_capital_costs Up-front capital costs for all technologies, in present value, excluding replacement costs and incentives. This value does not include offgridothercapital_costs.\ninitial_capital_costs_after_incentives Up-front capital costs for all technologies, in present value, excluding replacement costs, and accounting for incentives. This value does not include offgridothercapital_costs.\nreplacements_future_cost_after_tax Future cost of replacing storage and/or generator systems, after tax.\nreplacements_present_cost_after_tax Present value cost of replacing storage and/or generator systems, after tax.\nom_and_replacement_present_cost_after_tax Present value of all O&M and replacement costs, after tax.\ndeveloper_om_and_replacement_present_cost_after_tax Present value of all O&M and replacement costs incurred by developer, after tax.\noffgrid_microgrid_lcoe_dollars_per_kwh Levelized cost of electricity for modeled off-grid system.\nlifecycle_emissions_cost_climate LCC component if Settings input includeclimatein_objective is true. Present value of CO2 emissions cost over the analysis period.\nlifecycle_emissions_cost_health LCC component if Settings input includehealthin_objective is true. Present value of NOx, SO2, and PM2.5 emissions cost over the analysis period.\n\ncalculated in combine_results function if BAU scenario is run:\n\nbreakeven_cost_of_emissions_reduction_per_tonne_CO2\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#ElectricTariff-outputs","page":"Outputs","title":"ElectricTariff outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_electric_tariff_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict)","category":"page"},{"location":"reopt/outputs/#REopt.add_electric_tariff_results-Tuple{AbstractModel, REoptInputs, Dict}","page":"Outputs","title":"REopt.add_electric_tariff_results","text":"ElectricTariff results keys:\n\nlifecycle_energy_cost_after_tax lifecycle cost of energy from the grid in present value, after tax\nyear_one_energy_cost_before_tax cost of energy from the grid over the first year, before considering tax benefits\nlifecycle_demand_cost_after_tax lifecycle cost of power from the grid in present value, after tax\nyear_one_demand_cost_before_tax cost of power from the grid over the first year, before considering tax benefits\nlifecycle_fixed_cost_after_tax lifecycle fixed cost in present value, after tax\nyear_one_fixed_cost_before_tax fixed cost over the first year, before considering tax benefits\nlifecycle_min_charge_adder_after_tax lifecycle minimum charge in present value, after tax\nyear_one_min_charge_adder_before_tax minimum charge over the first year, before considering tax benefits\nyear_one_bill_before_tax sum of year_one_energy_cost_before_tax, year_one_demand_cost_before_tax, year_one_fixed_cost_before_tax, year_one_min_charge_adder_before_tax, and year_one_coincident_peak_cost_before_tax\nlifecycle_export_benefit_after_tax lifecycle export credits in present value, after tax\nyear_one_export_benefit_before_tax export credits over the first year, before considering tax benefits. A positive value indicates a benefit. \nlifecycle_coincident_peak_cost_after_tax lifecycle coincident peak charge in present value, after tax\nyear_one_coincident_peak_cost_before_tax coincident peak charge over the first year\n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#ElectricLoad-outputs","page":"Outputs","title":"ElectricLoad outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_electric_load_results","category":"page"},{"location":"reopt/outputs/#REopt.add_electric_load_results","page":"Outputs","title":"REopt.add_electric_load_results","text":"ElectricLoad results keys:\n\nload_series_kw vector of site load in every time step\ncritical_load_series_kw vector of site critical load in every time step\nannual_calculated_kwh sum of the load_series_kw\noffgrid_load_met_series_kw vector of electric load met by generation techs, for off-grid scenarios only\noffgrid_load_met_fraction percentage of total electric load met on an annual basis, for off-grid scenarios only\noffgrid_annual_oper_res_required_series_kwh , total operating reserves required (for load and techs) on an annual basis, for off-grid scenarios only\noffgrid_annual_oper_res_provided_series_kwh , total operating reserves provided on an annual basis, for off-grid scenarios only\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#ElectricUtility-outputs","page":"Outputs","title":"ElectricUtility outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_electric_utility_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict)","category":"page"},{"location":"reopt/outputs/#REopt.add_electric_utility_results-Tuple{AbstractModel, REoptInputs, Dict}","page":"Outputs","title":"REopt.add_electric_utility_results","text":"ElectricUtility results keys:\n\nannual_energy_supplied_kwh # Total energy supplied from the grid in an average year.\nelectric_to_load_series_kw # Vector of power drawn from the grid to serve load.\nelectric_to_storage_series_kw # Vector of power drawn from the grid to charge the battery.\nannual_emissions_tonnes_CO2 # Average annual total tons of CO2 emissions associated with the site's grid-purchased electricity. If includeexportedelecemissionsin_total is False, this value only reflects grid purchases. Otherwise, it accounts for emissions offset from any export to the grid.\nannual_emissions_tonnes_NOx # Average annual total tons of NOx emissions associated with the site's grid-purchased electricity. If includeexportedelecemissionsin_total is False, this value only reflects grid purchases. Otherwise, it accounts for emissions offset from any export to the grid.\nannual_emissions_tonnes_SO2 # Average annual total tons of SO2 emissions associated with the site's grid-purchased electricity. If includeexportedelecemissionsin_total is False, this value only reflects grid purchases. Otherwise, it accounts for emissions offset from any export to the grid.\nannual_emissions_tonnes_PM25 # Average annual total tons of PM25 emissions associated with the site's grid-purchased electricity. If includeexportedelecemissionsin_total is False, this value only reflects grid purchsaes. Otherwise, it accounts for emissions offset from any export to the grid.\nlifecycle_emissions_tonnes_CO2 # Total tons of CO2 emissions associated with the site's grid-purchased electricity over the analysis period. If includeexportedelecemissionsin_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.\nlifecycle_emissions_tonnes_NOx # Total tons of NOx emissions associated with the site's grid-purchased electricity over the analysis period. If includeexportedelecemissionsin_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.\nlifecycle_emissions_tonnes_SO2 # Total tons of SO2 emissions associated with the site's grid-purchased electricity over the analysis period. If includeexportedelecemissionsin_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.\nlifecycle_emissions_tonnes_PM25 # Total tons of PM2.5 emissions associated with the site's grid-purchased electricity over the analysis period. If includeexportedelecemissionsin_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.\navert_emissions_region # EPA AVERT region of the site. Used for health-related emissions from grid electricity (populated if default emissions values are used) and climate emissions if \"co2fromavert\" is set to true. \ndistance_to_avert_emissions_region_meters # Distance in meters from the site to the nearest AVERT emissions region.\ncambium_emissions_region # NREL Cambium region of the site. Used for climate-related emissions from grid electricity (populated only if default (Cambium) climate emissions values are used)\n\nnote: 'Series' and 'Annual' energy and emissions outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy and emissions outputs averaged over the analysis period. \n\nnote: Emissions outputs\nBy default, REopt uses marginal emissions rates for grid-purchased electricity. Marginal emissions rates are most appropriate for reporting a change in emissions (avoided or increased) rather than emissions totals. It is therefore recommended that emissions results from REopt (using default marginal emissions rates) be reported as the difference in emissions between the optimized and BAU case. Note also that the annual_emissions metrics are average annual emissions over the analysis period, accounting for expected changes in future grid emissions. \n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#PV-outputs","page":"Outputs","title":"PV outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_pv_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict)","category":"page"},{"location":"reopt/outputs/#REopt.add_pv_results-Tuple{AbstractModel, REoptInputs, Dict}","page":"Outputs","title":"REopt.add_pv_results","text":"PV results keys:\n\nsize_kw Optimal PV DC capacity\nlifecycle_om_cost_after_tax Lifecycle operations and maintenance cost in present value, after tax\nyear_one_energy_produced_kwh Energy produced over the first year\nannual_energy_produced_kwh Average annual energy produced when accounting for degradation\nlcoe_per_kwh Levelized Cost of Energy produced by the PV system\nelectric_to_load_series_kw Vector of power used to meet load over the first year\nelectric_to_storage_series_kw Vector of power used to charge the battery over the first year\nelectric_to_grid_series_kw Vector of power exported to the grid over the first year\nelectric_curtailed_series_kw Vector of power curtailed over the first year\nannual_energy_exported_kwh Average annual energy exported to the grid\nproduction_factor_series PV production factor in each time step, either provided by user or obtained from PVWatts\n\nwarn: Warn\nThe key(s) used to access PV outputs in the results dictionary is determined by the PV.name value to allow for modeling multiple PV options. (The default PV.name is \"PV\".)\n\nnote: Existing PV\nAll outputs account for any existing PV. E.g., size_kw includes existing capacity and the REopt-recommended additional capacity.  \n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#Wind-outputs","page":"Outputs","title":"Wind outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_wind_results","category":"page"},{"location":"reopt/outputs/#REopt.add_wind_results","page":"Outputs","title":"REopt.add_wind_results","text":"Wind results keys:\n\nsize_kw Optimal Wind capacity [kW]\nlifecycle_om_cost_after_tax Lifecycle operations and maintenance cost in present value, after tax\nyear_one_om_cost_before_tax Operations and maintenance cost in the first year, before tax benefits\nelectric_to_storage_series_kw Vector of power used to charge the battery over an average year\nelectric_to_grid_series_kw Vector of power exported to the grid over an average year\nannual_energy_exported_kwh Average annual energy exported to the grid\nelectric_to_load_series_kw Vector of power used to meet load over an average year\nannual_energy_produced_kwh Average annual energy produced\nlcoe_per_kwh Levelized Cost of Energy produced by the PV system\nelectric_curtailed_series_kw Vector of power curtailed over an average year\nproduction_factor_series Wind production factor in each time step, either provided by user or obtained from SAM\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#ElectricStorage-outputs","page":"Outputs","title":"ElectricStorage outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_electric_storage_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict, ::String)","category":"page"},{"location":"reopt/outputs/#REopt.add_electric_storage_results-Tuple{AbstractModel, REoptInputs, Dict, String}","page":"Outputs","title":"REopt.add_electric_storage_results","text":"ElectricStorage results keys:\n\nsize_kw Optimal inverter capacity\nsize_kwh Optimal storage capacity\nsoc_series_fraction Vector of normalized (0-1) state of charge values over the first year\nstorage_to_load_series_kw Vector of power used to meet load over the first year\ninitial_capital_cost Upfront capital cost for storage and inverter\n\nThe following results are reported if storage degradation is modeled:\n\nstate_of_health\nmaintenance_cost\nreplacement_month\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#HotThermalStorage-outputs","page":"Outputs","title":"HotThermalStorage outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_hot_storage_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict, ::String)","category":"page"},{"location":"reopt/outputs/#REopt.add_hot_storage_results-Tuple{AbstractModel, REoptInputs, Dict, String}","page":"Outputs","title":"REopt.add_hot_storage_results","text":"HotThermalStorage results keys:\n\nsize_gal Optimal TES capacity, by volume [gal]\nsoc_series_fraction Vector of normalized (0-1) state of charge values over the first year [-]\nstorage_to_load_series_mmbtu_per_hour Vector of power used to meet load over the first year [MMBTU/hr]\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#ColdThermalStorage-outputs","page":"Outputs","title":"ColdThermalStorage outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_cold_storage_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict, ::String)","category":"page"},{"location":"reopt/outputs/#REopt.add_cold_storage_results-Tuple{AbstractModel, REoptInputs, Dict, String}","page":"Outputs","title":"REopt.add_cold_storage_results","text":"ColdThermalStorage results:\n\nsize_gal Optimal TES capacity, by volume [gal]\nsoc_series_fraction Vector of normalized (0-1) state of charge values over the first year [-]\nstorage_to_load_series_ton Vector of power used to meet load over the first year [ton]\n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#Generator-outputs","page":"Outputs","title":"Generator outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_generator_results(::JuMP.AbstractModel, ::REoptInputs, ::Dict)","category":"page"},{"location":"reopt/outputs/#REopt.add_generator_results-Tuple{AbstractModel, REoptInputs, Dict}","page":"Outputs","title":"REopt.add_generator_results","text":"Generator results keys:\n\nsize_kw Optimal generator capacity\nlifecycle_fixed_om_cost_after_tax Lifecycle fixed operations and maintenance cost in present value, after tax\nyear_one_fixed_om_cost_before_tax fixed operations and maintenance cost over the first year, before considering tax benefits\nlifecycle_variable_om_cost_after_tax Lifecycle variable operations and maintenance cost in present value, after tax\nyear_one_variable_om_cost_before_tax variable operations and maintenance cost over the first year, before considering tax benefits\nlifecycle_fuel_cost_after_tax Lifecycle fuel cost in present value, after tax\nyear_one_fuel_cost_before_tax Fuel cost over the first year, before considering tax benefits\nannual_fuel_consumption_gal Gallons of fuel used in each year\nelectric_to_storage_series_kw Vector of power sent to battery in an average year\nelectric_to_grid_series_kw Vector of power sent to grid in an average year\nelectric_to_load_series_kw Vector of power sent to load in an average year\nannual_energy_produced_kwh Average annual energy produced over analysis period\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"method"},{"location":"reopt/outputs/#ExistingBoiler-outputs","page":"Outputs","title":"ExistingBoiler outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_existing_boiler_results","category":"page"},{"location":"reopt/outputs/#REopt.add_existing_boiler_results","page":"Outputs","title":"REopt.add_existing_boiler_results","text":"ExistingBoiler results keys:\n\nsize_mmbtu_per_hour\nfuel_consumption_series_mmbtu_per_hour \nannual_fuel_consumption_mmbtu\nthermal_production_series_mmbtu_per_hour\nannual_thermal_production_mmbtu\nthermal_to_storage_series_mmbtu_per_hour # Thermal power production to TES (HotThermalStorage) series [MMBtu/hr]\nthermal_to_steamturbine_series_mmbtu_per_hour\nthermal_to_load_series_mmbtu_per_hour\nlifecycle_fuel_cost_after_tax\nyear_one_fuel_cost_before_tax\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#CHP-outputs","page":"Outputs","title":"CHP outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_chp_results","category":"page"},{"location":"reopt/outputs/#REopt.add_chp_results","page":"Outputs","title":"REopt.add_chp_results","text":"CHP results keys:\n\nsize_kw Power capacity size of the CHP system [kW]\nsize_supplemental_firing_kw Power capacity of CHP supplementary firing system [kW]\nannual_fuel_consumption_mmbtu Fuel consumed in a year [MMBtu]\nannual_electric_production_kwh Electric energy produced in a year [kWh]\nannual_thermal_production_mmbtu Thermal energy produced in a year (not including curtailed thermal) [MMBtu]\nelectric_production_series_kw Electric power production time-series array [kW]\nelectric_to_grid_series_kw Electric power exported time-series array [kW]\nelectric_to_storage_series_kw Electric power to charge the battery storage time-series array [kW]\nelectric_to_load_series_kw Electric power to serve the electric load time-series array [kW]\nthermal_to_storage_series_mmbtu_per_hour Thermal power to TES (HotThermalStorage) time-series array [MMBtu/hr]\nthermal_curtailed_series_mmbtu_per_hour Thermal power wasted/unused/vented time-series array [MMBtu/hr]\nthermal_to_load_series_mmbtu_per_hour Thermal power to serve the heating load time-series array [MMBtu/hr]\nthermal_to_steamturbine_series_mmbtu_per_hour Thermal (steam) power to steam turbine time-series array [MMBtu/hr]\nyear_one_fuel_cost_before_tax Cost of fuel consumed by the CHP system in year one [$]\nlifecycle_fuel_cost_after_tax Present value of cost of fuel consumed by the CHP system, after tax [$]\nyear_one_standby_cost_before_tax CHP standby charges in year one [$] \nlifecycle_standby_cost_after_tax Present value of all CHP standby charges, after tax.\nthermal_production_series_mmbtu_per_hour  \n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#Boiler-outputs","page":"Outputs","title":"Boiler outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_boiler_results","category":"page"},{"location":"reopt/outputs/#HeatingLoad-outputs","page":"Outputs","title":"HeatingLoad outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_heating_load_results","category":"page"},{"location":"reopt/outputs/#REopt.add_heating_load_results","page":"Outputs","title":"REopt.add_heating_load_results","text":"HeatingLoad results keys:\n\ndhw_thermal_load_series_mmbtu_per_hour vector of site thermal domestic hot water load in every time step \nspace_heating_thermal_load_series_mmbtu_per_hour vector of site thermal space heating load in every time step\nprocess_heat_thermal_load_series_mmbtu_per_hour vector of site thermal process heat load in every time step\ntotal_heating_thermal_load_series_mmbtu_per_hour vector of sum thermal heating load in every time step\ndhw_boiler_fuel_load_series_mmbtu_per_hour vector of site fuel domestic hot water load in every time step\nspace_heating_boiler_fuel_load_series_mmbtu_per_hour vector of site fuel space heating load in every time step\nprocess_heat_boiler_fuel_load_series_mmbtu_per_hour vector of site fuel process heat load in every time step\ntotal_heating_thermal_load_series_mmbtu_per_hour vector of sum fuel heating load in every time step\nannual_calculated_dhw_thermal_load_mmbtu sum of the dhw_thermal_load_series_mmbtu_per_hour\nannual_calculated_space_heating_thermal_load_mmbtu sum of the space_heating_thermal_load_series_mmbtu_per_hour\nannual_calculated_process_heat_thermal_load_mmbtu sum of the process_heat_thermal_load_series_mmbtu_per_hour\nannual_calculated_total_heating_thermal_load_mmbtu sum of the total_heating_thermal_load_series_mmbtu_per_hour\nannual_calculated_dhw_boiler_fuel_load_mmbtu sum of the dhw_boiler_fuel_load_series_mmbtu_per_hour\nannual_calculated_space_heating_boiler_fuel_load_mmbtu sum of the space_heating_boiler_fuel_load_series_mmbtu_per_hour\nannual_calculated_process_heat_boiler_fuel_load_mmbtu sum of the process_heat_boiler_fuel_load_series_mmbtu_per_hour\nannual_calculated_total_heating_boiler_fuel_load_mmbtu sum of the total_heating_boiler_fuel_load_series_mmbtu_per_hour\n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#CoolingLoad-outputs","page":"Outputs","title":"CoolingLoad outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_cooling_load_results","category":"page"},{"location":"reopt/outputs/#REopt.add_cooling_load_results","page":"Outputs","title":"REopt.add_cooling_load_results","text":"CoolingLoad results keys:\n\nload_series_ton # vector of site cooling load in every time step\nannual_calculated_tonhour # sum of the load_series_ton. Annual site total cooling load [tonhr]\nelectric_chiller_base_load_series_kw # Hourly total base load drawn from chiller [kW-electric]\nannual_electric_chiller_base_load_kwh # Annual total base load drawn from chiller [kWh-electric]\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#Uncertain-Outages-outputs","page":"Outputs","title":"Uncertain Outages outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_outage_results","category":"page"},{"location":"reopt/outputs/#REopt.add_outage_results","page":"Outputs","title":"REopt.add_outage_results","text":"Outages results keys:\n\nexpected_outage_cost The expected outage cost over the random outages modeled.\nmax_outage_cost_per_outage_duration The maximum outage cost in every outage duration modeled.\nunserved_load_series_kw The amount of unserved load in each outage and each time step.\nunserved_load_per_outage_kwh The total unserved load in each outage.\nstorage_microgrid_upgrade_cost The cost to include the storage system in the microgrid.\nstorage_discharge_series_kw Array of storage power discharged in every outage modeled.\npv_microgrid_size_kw Optimal microgrid PV capacity. Note that the name PV can change based on user provided PV.name.\npv_microgrid_upgrade_cost The cost to include the PV system in the microgrid.\npv_to_storage_series_kw Array of PV power sent to the battery in every outage modeled.\npv_curtailed_series_kw Array of PV curtailed in every outage modeled.\npv_to_load_series_kw Array of PV power used to meet load in every outage modeled.\nwind_microgrid_size_kw Optimal microgrid Wind capacity.\nwind_microgrid_upgrade_cost The cost to include the Wind system in the microgrid.\nwind_to_storage_series_kw Array of Wind power sent to the battery in every outage modeled.\nwind_curtailed_series_kw Array of Wind curtailed in every outage modeled.\nwind_to_load_series_kw Array of Wind power used to meet load in every outage modeled.\ngenerator_microgrid_size_kw Optimal microgrid Generator capacity. Note that the name Generator can change based on user provided Generator.name.\ngenerator_microgrid_upgrade_cost The cost to include the Generator system in the microgrid.\ngenerator_to_storage_series_kw Array of Generator power sent to the battery in every outage modeled.\ngenerator_curtailed_series_kw Array of Generator curtailed in every outage modeled.\ngenerator_to_load_series_kw Array of Generator power used to meet load in every outage modeled.\ngenerator_fuel_used_per_outage_gal Array of fuel used in every outage modeled, summed over all Generators.\nchp_microgrid_size_kw Optimal microgrid CHP capacity.\nchp_microgrid_upgrade_cost The cost to include the CHP system in the microgrid.\nchp_to_storage_series_kw Array of CHP power sent to the battery in every outage modeled.\nchp_curtailed_series_kw Array of CHP curtailed in every outage modeled.\nchp_to_load_series_kw Array of CHP power used to meet load in every outage modeled.\nchp_fuel_used_per_outage_mmbtu Array of fuel used in every outage modeled, summed over all CHPs.\nmicrogrid_upgrade_capital_cost Total capital cost of including technologies in the microgrid\ncritical_loads_per_outage_series_kw Critical load series in every outage modeled\nsoc_series_fraction ElectricStorage state of charge series in every outage modeled\n\nwarn: Warn\nThe output keys for \"Outages\" are subject to change.\n\nnote: Note\nOutage results only added to results when multiple outages are modeled via the ElectricUtility.outage_start_time_steps and ElectricUtility.outage_durations inputs.\n\nnote: Note\nWhen modeling PV the name of the PV system is used for the output keys to allow for modeling multiple PV systems. The default PV name is PV.\n\nwarn: Warn\nThe Outage results can be very large when many outages are modeled and can take a long time to generate.\n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#AbsorptionChiller-outputs","page":"Outputs","title":"AbsorptionChiller outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_absorption_chiller_results","category":"page"},{"location":"reopt/outputs/#REopt.add_absorption_chiller_results","page":"Outputs","title":"REopt.add_absorption_chiller_results","text":"AbsorptionChiller results keys:\n\nsize_kw # Optimal power capacity size of the absorption chiller system [kW]\nsize_ton \nthermal_to_storage_series_ton # Thermal production to ColdThermalStorage\nthermal_to_load_series_ton # Thermal production to cooling load\nthermal_consumption_series_mmbtu_per_hour\nannual_thermal_consumption_mmbtu\nannual_thermal_production_tonhour\nelectric_consumption_series_kw\nannual_electric_consumption_kwh\n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#FlexibleHVAC-outputs","page":"Outputs","title":"FlexibleHVAC outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_flexible_hvac_results","category":"page"},{"location":"reopt/outputs/#REopt.add_flexible_hvac_results","page":"Outputs","title":"REopt.add_flexible_hvac_results","text":"FlexibleHVAC results keys:\n\npurchased \ntemperatures_degC_node_by_time\nupgrade_cost\n\n\n\n\n\n","category":"function"},{"location":"reopt/outputs/#SteamTurbine-outputs","page":"Outputs","title":"SteamTurbine outputs","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REopt.add_steam_turbine_results","category":"page"},{"location":"reopt/outputs/#REopt.add_steam_turbine_results","page":"Outputs","title":"REopt.add_steam_turbine_results","text":"SteamTurbine results keys:\n\nsize_kw Power capacity size [kW]\nannual_thermal_consumption_mmbtu Thermal (steam) consumption [MMBtu]\nannual_electric_production_kwh Electric energy produced in a year [kWh]\nannual_thermal_production_mmbtu Thermal energy produced in a year [MMBtu]\nthermal_consumption_series_mmbtu_per_hour Thermal (steam) energy consumption series [MMBtu/hr]\nelectric_production_series_kw Electric power production series [kW]\nelectric_to_grid_series_kw Electric power exported to grid series [kW]\nelectric_to_storage_series_kw Electric power to charge the battery series [kW]\nelectric_to_load_series_kw Electric power to serve load series [kW]\nthermal_to_storage_series_mmbtu_per_hour Thermal production to charge the HotThermalStorage series [MMBtu/hr]\nthermal_to_load_series_mmbtu_per_hour Thermal production to serve the heating load SERVICES [MMBtu/hr]\n\nnote: 'Series' and 'Annual' energy outputs are average annual\nREopt performs load balances using average annual production values for technologies that include degradation.  Therefore, all timeseries (_series) and annual_ results should be interpretted as energy outputs averaged over the analysis period. \n\n\n\n\n\n","category":"function"},{"location":"developer/organization/#File-Organization","page":"File Organization","title":"File Organization","text":"","category":"section"},{"location":"developer/organization/#data","page":"File Organization","title":"data","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"Contains static input values such as the DoE Commercial Reference Building load profiles","category":"page"},{"location":"developer/organization/#docs","page":"File Organization","title":"docs","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"Contains all of the files for constructing this package's documentation.","category":"page"},{"location":"developer/organization/#src","page":"File Organization","title":"src","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"All of the code necessary for this package.","category":"page"},{"location":"developer/organization/#src/constraints","page":"File Organization","title":"src/constraints","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"Mathematical model constraints organized by which high-level structures they primarily impact.","category":"page"},{"location":"developer/organization/#src/core","page":"File Organization","title":"src/core","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"The code that is central to this package. These files are used to build the inputs and the JuMP model. Some highlights:","category":"page"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"scenario.jl is the entry point for user's inputs. It uses many of the other files in the core directory to construct the high level inputs (such electric_load.jl, financial.jl, and electric_tariff.jl).\nreopt_inputs.jl uses the Scenario to construct the inputs necessary to build the JuMP model\nreopt.jl contains the methods for building and runnning the mathematical model","category":"page"},{"location":"developer/organization/#src/lindistflow","page":"File Organization","title":"src/lindistflow","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"Code for adding a LinDistFlow model to a multi-node REopt model.","category":"page"},{"location":"developer/organization/#src/mpc","page":"File Organization","title":"src/mpc","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"A Model Predictive Control implementation of REopt.","category":"page"},{"location":"developer/organization/#src/outagesim","page":"File Organization","title":"src/outagesim","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"The outage simulator code, which calculates some resilience metrics such as the probability of surviving varying outage durations.","category":"page"},{"location":"developer/organization/#src/results","page":"File Organization","title":"src/results","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"All of the code for post-processing an optimized model and creating the results dictionary returned to the user.","category":"page"},{"location":"developer/organization/#src/sam","page":"File Organization","title":"src/sam","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"System Advisor Model libraries used by this package for the Wind model.","category":"page"},{"location":"developer/organization/#test","page":"File Organization","title":"test","text":"","category":"section"},{"location":"developer/organization/","page":"File Organization","title":"File Organization","text":"Built-in tests for several different solvers.","category":"page"},{"location":"mpc/inputs/#MPC-Inputs","page":"MPC Inputs","title":"MPC Inputs","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The input structure for MPC models is very similar to the structure for REopt Inputs. The primary differences are ","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The MPCElectricTariff requires specifying individual rate components (and does not parse URDB rates like ElectricTariff).\nThe capacities of any provided DER must be provided\nThe load profile for each time step must be provided","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Just like REopt Inputs, inputs to run_mpc can be provided in one of three formats:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"a file path (string) to a JSON file,\na Dict, or\nusing the MPCInputs struct","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The accepted keys for the JSON file or Dict are:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"ElectricLoad\nElectricTariff\nPV\nElectricStorage\nFinancial\nGenerator\nElectricUtility\nSettings","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The simplest scenario does not have any dispatch optimization and is essentially a cost \"calculator\":","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"{\n    \"ElectricLoad\": {\n        \"loads_kw\": [10.0, 11.0, 12.0]\n    },\n    \"ElectricTariff\": {\n        \"energy_rates\": [0.1, 0.2, 0.3]\n    }\n}","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"note: Note\nThe ElectricLoad.loads_kw can have an arbitrary length, but its length must be the same lengths as many other inputs such as the MPCElectricTariff.energy_rates and the PV.production_factor_series.","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Here is a more complex MPCScenario, which is used in MPC Examples:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"{\n    \"PV\": {\n        \"size_kw\": 150,\n        \"production_factor_series\": [\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.05,\n            0.10,\n            0.15,\n            0.30,\n            0.6,\n            0.5,\n            0.3,\n            0.02,\n            0.01,\n            0.005,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0\n        ]\n    },\n    \"ElectricStorage\": {\n        \"size_kw\": 30.0,\n        \"size_kwh\": 60.0,\n        \"can_grid_charge\": true\n    },\n    \"ElectricLoad\": {\n        \"loads_kw\": [\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100\n        ]\n    },\n    \"ElectricTariff\": {\n        \"energy_rates\": [\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.2,\n            0.2,\n            0.2,\n            0.3,\n            0.2,\n            0.2,\n            0.2,\n            0.1,\n            0.1,\n            0.1,\n            0.1\n        ],\n        \"monthly_demand_rates\": [10.0],\n        \"monthly_previous_peak_demands\": [98.0],\n        \"tou_demand_rates\": [0.0, 15.0],\n        \"tou_demand_time_steps\": [\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], \n            [16, 17, 18, 19, 20, 21, 22, 23, 24]\n        ],\n        \"tou_previous_peak_demands\": [98.0, 97.0],\n        \"net_metering\": false,\n        \"export_rates\": [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, \n            0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\n    }\n}","category":"page"},{"location":"mpc/inputs/#MPC-Input-Structures","page":"MPC Inputs","title":"MPC Input Structures","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Note that the keys of the input Dict or JSON file do not need the MPC prefix. ","category":"page"},{"location":"mpc/inputs/#MPCElectricTariff","page":"MPC Inputs","title":"MPCElectricTariff","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCElectricTariff(d::Dict)","category":"page"},{"location":"mpc/inputs/#REopt.MPCElectricTariff-Tuple{Dict}","page":"MPC Inputs","title":"REopt.MPCElectricTariff","text":"MPCElectricTariff(d::Dict)\n\nfunction for parsing user inputs into \n\n    struct MPCElectricTariff\n        monthly_previous_peak_demands::Array{Float64,1}\n        energy_rates::Array{Float64,1} \n\n        monthly_demand_rates::Array{Float64,1}\n        time_steps_monthly::Array{Array{Int64,1},1}  # length = 0 or 12\n\n        tou_demand_rates::Array{Float64,1}\n        tou_demand_ratchet_time_steps::Array{Array{Int64,1},1}  # length = n_tou_demand_ratchets\n        tou_previous_peak_demands::Array{Float64,1}\n\n        fixed_monthly_charge::Float64\n        annual_min_charge::Float64\n        min_monthly_charge::Float64\n\n        export_rates::DenseAxisArray{Array{Float64,1}}\n        export_bins::Array{Symbol,1}\n    end\n\nKeys for d include:\n\nenergy_rates\nREQUIRED\nmust have length equal to ElectricLoad.loads_kw\nmonthly_demand_rates\ndefault = [0]\ntime_steps_monthly\narray of arrays for integer time steps that the monthly_demand_rates apply to\ndefault = [collect(1:length(energy_rates))]\nmonthly_previous_peak_demands\ndefault = [0]\ntou_demand_rates\nan array of time-of-use demand rates\nmust have length equal to tou_demand_time_steps\ndefault = []\ntou_demand_time_steps\nan array of arrays for the integer time steps that apply to the tou_demand_rates\ndefault = []\ntou_previous_peak_demands\nan array of the previous peak demands set in each time-of-use demand period\nmust have length equal to tou_demand_time_steps\ndefault = []\nnet_metering\nboolean, if true then customer DER export is compensated at the energy_rates\nexport_rates\ncan be a <:Real or Array{<:Real, 1}, or not provided\nif provided, customer DER export is compensated at the export_rates\n\nNOTE: if both net_metering=true and export_rates are provided then the model can choose from either option.\n\n\n\n\n\n","category":"method"},{"location":"mpc/inputs/#MPCElectricLoad","page":"MPC Inputs","title":"MPCElectricLoad","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCElectricLoad","category":"page"},{"location":"mpc/inputs/#REopt.MPCElectricLoad","page":"MPC Inputs","title":"REopt.MPCElectricLoad","text":"MPCElectricLoad\n\nBase.@kwdef struct MPCElectricLoad\n    loads_kw::Array{Real,1}\n    critical_loads_kw::Union{Nothing, Array{Real,1}} = nothing\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCElectricStorage","page":"MPC Inputs","title":"MPCElectricStorage","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCElectricStorage","category":"page"},{"location":"mpc/inputs/#REopt.MPCElectricStorage","page":"MPC Inputs","title":"REopt.MPCElectricStorage","text":"MPCElectricStorage\n\nBase.@kwdef struct MPCElectricStorage < AbstractElectricStorage\n    size_kw::Float64\n    size_kwh::Float64\n    charge_efficiency::Float64 =  0.96 * 0.975^2\n    discharge_efficiency::Float64 =  0.96 * 0.975^2\n    soc_min_fraction::Float64 = 0.2\n    soc_init_fraction::Float64 = 0.5\n    can_grid_charge::Bool = true\n    grid_charge_efficiency::Float64 = 0.96 * 0.975^2\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCFinancial","page":"MPC Inputs","title":"MPCFinancial","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCFinancial","category":"page"},{"location":"mpc/inputs/#REopt.MPCFinancial","page":"MPC Inputs","title":"REopt.MPCFinancial","text":"MPCFinancial\n\nBase.@kwdef struct MPCFinancial\n    value_of_lost_load_per_kwh::Union{Array{R,1}, R} where R<:Real = 1.00\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCPV","page":"MPC Inputs","title":"MPCPV","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCPV","category":"page"},{"location":"mpc/inputs/#REopt.MPCPV","page":"MPC Inputs","title":"REopt.MPCPV","text":"MPCPV\n\nBase.@kwdef struct MPCPV\n    name::String=\"PV\"\n    size_kw::Real = 0\n    production_factor_series::Union{Nothing, Array{Real,1}} = nothing\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCGenerator","page":"MPC Inputs","title":"MPCGenerator","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCGenerator","category":"page"},{"location":"mpc/inputs/#REopt.MPCGenerator","page":"MPC Inputs","title":"REopt.MPCGenerator","text":"MPCGenerator\n\nstruct with inner constructor:\n\nfunction MPCGenerator(;\n    size_kw::Real,\n    fuel_cost_per_gallon::Real = 3.0,\n    electric_efficiency_full_load::Real = 0.3233,\n    electric_efficiency_half_load::Real = electric_efficiency_full_load,\n    fuel_avail_gal::Real = 1.0e9,\n    fuel_higher_heating_value_kwh_per_gal::Real = KWH_PER_GAL_DIESEL,\n    min_turn_down_fraction::Real = 0.0,  # TODO change this to non-zero value\n    only_runs_during_grid_outage::Bool = true,\n    sells_energy_back_to_grid::Bool = false,\n    om_cost_per_kwh::Real=0.0,\n    )\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCSettings","page":"MPC Inputs","title":"MPCSettings","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The MPCSettings is the same as the Settings.","category":"page"},{"location":"mpc/inputs/#MPCLimits","page":"MPC Inputs","title":"MPCLimits","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REopt.MPCLimits","category":"page"},{"location":"mpc/inputs/#REopt.MPCLimits","page":"MPC Inputs","title":"REopt.MPCLimits","text":"MPCLimits\n\nstruct for MPC specific input parameters:\n\ngrid_draw_limit_kw_by_time_step::Vector{<:Real} limits for grid power consumption in each time step; length must be same as length(loads_kw).\nexport_limit_kw_by_time_step::Vector{<:Real} limits for grid power export in each time step; length must be same as length(loads_kw).\n\nwarn: Warn\ngrid_draw_limit_kw_by_time_step and export_limit_kw_by_time_step values can lead to  infeasible problems. For example, there is a constraint that the electric load must be met in  each time step and by limiting the amount of power from the grid the load balance constraint  could be infeasible.\n\n\n\n\n\n","category":"type"},{"location":"mpc/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"mpc/methods/","page":"Methods","title":"Methods","text":"run_mpc\nbuild_mpc!","category":"page"},{"location":"mpc/methods/#REopt.run_mpc","page":"Methods","title":"REopt.run_mpc","text":"run_mpc(m::JuMP.AbstractModel, fp::String)\n\nSolve the model predictive control problem using the MPCScenario defined in the JSON file stored at the file path fp.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\nrun_mpc(m::JuMP.AbstractModel,  d::Dict)\n\nSolve the model predictive control problem using the MPCScenario defined in the dict d.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\nrun_mpc(m::JuMP.AbstractModel, p::MPCInputs)\n\nSolve the model predictive control problem using the MPCInputs.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\nrun_mpc(m::JuMP.AbstractModel, ps::AbstractVector{MPCInputs})\n\nSolve the model predictive control problem using multiple MPCInputs.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\n","category":"function"},{"location":"mpc/methods/#REopt.build_mpc!","page":"Methods","title":"REopt.build_mpc!","text":"build_mpc!(m::JuMP.AbstractModel, p::MPCInputs)\n\nAdd variables and constraints for model predictive control model.  Similar to a REopt model but with any length of horizon (instead of one calendar year), and the DER sizes must be provided.\n\n\n\n\n\nbuild_mpc!(m::JuMP.AbstractModel, ps::AbstractVector{MPCInputs})\n\nAdd variables and constraints for model predictive control model of multiple nodes.  Similar to a REopt model but with any length of horizon (instead of one calendar year), and the DER sizes must be provided.\n\n\n\n\n\n","category":"function"},{"location":"developer/documentation/#Documenting-the-Code","page":"Documenting the Code","title":"Documenting the Code","text":"","category":"section"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"Besides the primary methods for using REopt.jl (which are documented in docs/reopt/methods.md) users need to know what inputs and outputs are available. The REopt.jl package and the REopt API v3 and later are designed to have the same input and output names so that a user can in theory use the same JSON or dictionary inputs to either REopt.jl or the API and get the same results (assuming that the same version of REopt.jl is used in both cases). ","category":"page"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"In many cases the REopt.jl package will lead the development of the API, that is a new capability in REopt is first developed in the Julia package, and then if necessary that capability is added to the API (and the webtool after that if necessary). This means that REopt.jl and the API will not always have the same inputs (and outputs). ","category":"page"},{"location":"developer/documentation/#Inputs","page":"Documenting the Code","title":"Inputs","text":"","category":"section"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"For each of the structs that are attached to the Scenario struct we document the input fields, their types, and default values if any. In some cases documenting inputs can be as simple as copying and pasting the function signature that builds the input struct into the doc string of the function. However, there are some cases in which a function contains input fields that are not meant to be provided/accessed by a user. For example, the Site.latitude input is used in many other input constructors, such as in PV to look up the PVWatts production factor, but the user does not need to provide a PV.latitude input. In these cases one should not include all of the function signature fields in the doc string.","category":"page"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"Any new input function and/or struct must be added to the docs/reopt/inputs.md file for it to show up in the online documentation (see that file for examples).","category":"page"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"For describing how to use more complicated inputs use a note admonition like:","category":"page"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"note: Note\nThis is an input note.","category":"page"},{"location":"developer/documentation/#Outputs","page":"Documenting the Code","title":"Outputs","text":"","category":"section"},{"location":"developer/documentation/","page":"Documenting the Code","title":"Documenting the Code","text":"All of the results functions should have a list of output fields with descriptions in a bulleted list in the function doc string.  When adding a new results function it should be added to the docs/reopt/outputs.md file so that it shows up in the online documentation. There is no need to include the function signature in the doc string.","category":"page"},{"location":"developer/adding_tech/#Adding-a-Technology","page":"Adding a Technology","title":"Adding a Technology","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"REopt can be used in many ways, but its primary use is to evaluate the techno-economic feasibility of energy generation and storage technologies. In this section we describe how one might add a new technology to the REopt model for evaluation. At a high level the steps are:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Define the mathematical model for how the technology will interact with the other technologies, which includes:\ndefining appropriate decision variables (the technology's capacity for example)\ndefining model constraints (operational constraints for example)\nDefine the inputs and default values necessary to model the technology in the mathematical model\nMap the input values to the sets and coefficients needed in the mathematical model\nCreate an adapter function to output the desired results from the mathematical model\nTest the new technology","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"All steps are not necessarily executed in this order and in fact most likely must be done in concert. For example, in order to define a model constraint one must define the input parameters. Also, it is good practice to think of how you will test the new technology from the very beginning of the design process and incrementally test your additions to the model as well as make sure that no existing tests fail due to your modifications to REopt.","category":"page"},{"location":"developer/adding_tech/#.-Mathematical-Model","page":"Adding a Technology","title":"1. Mathematical Model","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Each technology will have unique decision variables and constraints. However, there are some decision variables that apply to many technologies. We will use the PV technology to demonstrate some variables and constraints that are shared among all generation technologies and some that are unique to PV.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"First, the PV technology can meet electrical demand and thus is part of the techs.elec. By including the PV technology in the set of techs.elec we can take advantage of existing model constraints such as the electrical load balance:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@constraint(m, [ts in p.time_steps_with_grid],\n    sum(p.production_factor[t, ts] * p.levelization_factor[t] * m[Symbol(\"dvRatedProduction\"*_n)][t,ts] for t in p.techs.elec) \n    + sum( m[Symbol(\"dvDischargeFromStorage\"*_n)][b,ts] for b in p.s.storage.types.elec ) \n    + sum(m[Symbol(\"dvGridPurchase\"*_n)][ts, tier] for tier in 1:p.s.electric_tariff.n_energy_tiers) \n    ==\n    sum( sum(m[Symbol(\"dvProductionToStorage\"*_n)][b, t, ts] for b in p.s.storage.types.elec) \n    + m[Symbol(\"dvCurtail\"*_n)][t, ts] for t in p.techs.elec)\n    + sum(m[Symbol(\"dvGridToStorage\"*_n)][b, ts] for b in p.s.storage.types.elec)\n    + p.s.electric_load.loads_kw[ts]\n)","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"note: Note\nThroughout the REopt code p is used as the variable name for the concrete instance of REoptInputs. The p is a legacy name from when the REoptInputs was called a parameter structure. Also, m is used throughout the code for the JuMP Model and p.s is the Scenario structure.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"From the load balance constraint we can see that the PV technology (and each techs.elec) includes input parameters for the production_factor and levelization_factor, and that the PV technology has the decision variables dvRatedProduction and dvCurtail.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"note: Note\nAll decision variables in the model start with dv and use camel case naming after dv. Also, in order to take advantage of dynamic variable names for multinode models we use the Symbol notation (e.g. m[Symbol(\"dvProductionToStorage\"*_n)) to define and access variables in the model.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"The p.techs data structure is defined as follows:","category":"page"},{"location":"developer/adding_tech/#Techs","page":"Adding a Technology","title":"Techs","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"REopt.Techs\nREopt.Techs(s::Scenario)\nREopt.Techs(p::REoptInputs, s::BAUScenario)","category":"page"},{"location":"developer/adding_tech/#REopt.Techs","page":"Adding a Technology","title":"REopt.Techs","text":"Techs\n\nTechs contains the index sets that are used to define the model constraints and decision variables.\n\nmutable struct Techs\n    all::Vector{String}\n    elec::Vector{String}\n    pv::Vector{String}\n    gen::Vector{String}\n    pbi::Vector{String}\n    no_curtail::Vector{String}\n    no_turndown::Vector{String}\n    segmented::Vector{String}\n    heating::Vector{String}\n    cooling::Vector{String}\n    boiler::Vector{String}\n    fuel_burning::Vector{String}\n    thermal::Vector{String}\n    chp::Vector{String}\n    requiring_oper_res::Vector{String}\n    providing_oper_res::Vector{String}\n    electric_chiller::Vector{String}\n    absorption_chiller::Vector{String}\n    steam_turbine::Vector{String}\n    can_supply_steam_turbine::Vector{String}\n    electric_heater::Vector{String}    \n    can_serve_space_heating::Vector{String}\n    can_serve_dhw::Vector{String}\n    can_serve_process_heat::Vector{String}\n    ghp::Vector{String}\n    ashp::Vector{String}\nend\n\n\n\n\n\n","category":"type"},{"location":"developer/adding_tech/#REopt.Techs-Tuple{Scenario}","page":"Adding a Technology","title":"REopt.Techs","text":"Techs(s::Scenario)\n\nCreate a Techs struct for the REoptInputs.\n\n\n\n\n\n","category":"method"},{"location":"developer/adding_tech/#REopt.Techs-Tuple{REoptInputs, BAUScenario}","page":"Adding a Technology","title":"REopt.Techs","text":"Techs(p::REoptInputs, s::BAUScenario)\n\nCreate a Techs struct for the BAUInputs\n\n\n\n\n\n","category":"method"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"From the Techs definition we can see that there are already a lot of different energy generation technology categories in REopt. Adding a new technology to the model could be as simple as adding the appropriate inputs to REoptInputs (described in the next section) and using the Techs structure to define which variables and constraints apply to the new technology.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"The PV technology is also part of a unique set of Techs, namely the techs.pv (there can be multiple PV technologies in a single model as we will see soon). An example of a constraint applied over techs.pv is:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@constraint(m, [loc in p.pvlocations],\n    sum(m[Symbol(\"dvSize\"*_n)][t] * p.pv_to_location[t][loc] for t in p.techs.pv) <= p.maxsize_pv_locations[loc]\n)","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Here we can see that the dvSize for each techs.pv is constrained based on the location of each PV technology. This constraint allows us to uniquely limit the PV capacity for roof mounted systems vs. ground mounted systems based on the available space at a site. We also see some additional inputs for the PV technology, such as the pvlocations and maxsize_pv_locations. Creating these input values is described in the next two sections.","category":"page"},{"location":"developer/adding_tech/#.-User-Inputs","page":"Adding a Technology","title":"2. User Inputs","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Any new technology should have a technologyname.jl file in the src/core directory. For example, in the src/core/pv.jl file we have a data structure and constructor for defining default values and creating the PV structure that is attached to the Scenario. Once the new technology's data structure is defined it must be added to the Scenario structure (see src/core/scenario.jl). ","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"When adding a new technology to REopt one must decide on how a user of the REopt will define the technology. Continuing with the PV example we saw that we need to define the production_factor for the PV technology in every time step. The production_factor varies from zero to one and defines the availability of the technology. For PV we have a default method for creating the production_factor as well as allow the user to provide their own production_factor.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"We let the user define the production_factor by providing the PVs production_factor_series input in their JSON file or dictionary when creating their Scenario. If the user does not provide a value for production_factor_series then we use the PVWatts API to get a production_factor based on the Site.latitude and Site.longitude. The PV inputs structure also allows the user to change the arguments that are passed to PVWatts.","category":"page"},{"location":"developer/adding_tech/#.-REopt-Inputs","page":"Adding a Technology","title":"3. REopt Inputs","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"The REoptInputs constructor is the work-horse for defining all the mathematical model parameters. It converts the user's Scenario into a format that is necessary for adding the model decision variables and constraints.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"A major part of the REoptInputs constructor is creating arrays that are indexed on sets of strings (defined in Techs) that allow us to define constraints all applicable technologies. Continuing with the PV example, the electrical load balance constraint includes:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"sum(p.production_factor[t, ts] * p.levelization_factor[t] * m[Symbol(\"dvRatedProduction\"*_n)][t,ts] for t in p.techs.elec) ","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"which implies that we need to define a production_factor for all techs.elec in every time step ts. To create the production_factor array the REoptInputs constructor first creates an empty array like so:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"production_factor = DenseAxisArray{Float64}(undef, techs.all, 1:length(s.electric_load.loads_kw))","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"and then passes that array to technology specific functions that add their production factors to the production_factor array. For example, for PV within the setup_pv_inputs method we have:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"for pv in s.pvs\n    production_factor[pv.name, :] = get_production_factor(pv, s.site.latitude, s.site.longitude)\n    ...\nend","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"The completed production_factor array is then attached to the REoptInputs structure so that it can be used as needed to create the mathematical model.","category":"page"},{"location":"developer/adding_tech/#.-Results","page":"Adding a Technology","title":"4. Results","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"After adding a new technology to the REopt mathematical model and getting the new inputs set up you can create some results from the optimized model. Some or all of your new results can also be used in a test for the new technology.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"All of the results methods are defined in src/results, with src/results/results.jl containing the main method for creating results. The results are returned to the user as a dictionary. If a user is not modeling your new technology then there is no reason to create any new results. Therefore, in reopt_results we have:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"if !isempty(p.techs.pv)\n    add_pv_results(m, p, d; _n)\nend","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"which uses the model m and the REoptInputs p to add results to the dictionary d.","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"note: Note\nThe _n argument is used in many places in REopt to optionally modeled multinode scenarios. The default value for _n is an empty string. When modeling multiple nodes the n in the _n string is set to the Site.node value, which is an integer. For example, if the Site.node is 3 then _n = \"_3\".","category":"page"},{"location":"developer/adding_tech/#.-Testing-the-new-technology","page":"Adding a Technology","title":"5. Testing the new technology","text":"","category":"section"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Adding a new test is not necessarily the last step in adding a technology to the REopt model. In fact, it is best to use a simple test to test your code as you add the new technolgy and then adapt the test as you add more capability to the code. For example, once you have created you new technology's input interface you can test just creating a Scenario with the new technology by passing the path to a JSON file that contains the minimum required inputs for a Scenario and your new technology. This might look like:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@testset \"My new technology\" begin\n    s = Scenario(\"path/to/mynewtech.json\")\nend","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"The next testing step might be checking the REoptInputs additions for your new technolgy:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@testset \"My new technology\" begin\n    s = Scenario(\"path/to/mynewtech.json\")\n    p = REoptInputs(s)\nend","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Once you have all of your new inputs set up you can test the model creation with:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@testset \"My new technology\" begin\n    m = Model(Cbc.Optimizer)\n    build_reopt!(m, \"path/to/mynewtech.json\")\nend","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"Finally, you can test the full work-flow with something like:","category":"page"},{"location":"developer/adding_tech/","page":"Adding a Technology","title":"Adding a Technology","text":"@testset \"My new technology\" begin\n    m = Model(Cbc.Optimizer)\n    results = run_reopt(m, \"path/to/mynewtech.json\")\n    @test results[\"mynewtech\"][\"some_result\"] ≈ 78.9 atol=0.1\nend","category":"page"},{"location":"developer/inputs/#The-REoptInputs-structure","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"The REoptInputs structure uses the Scenario to build all of the data necessary to construct the JuMP mathematical model.","category":"page"},{"location":"developer/inputs/#REoptInputs","page":"The REoptInputs structure","title":"REoptInputs","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"REoptInputs\nREoptInputs(fp::String)\nREoptInputs(s::REopt.AbstractScenario)","category":"page"},{"location":"developer/inputs/#REopt.REoptInputs","page":"The REoptInputs structure","title":"REopt.REoptInputs","text":"REoptInputs\n\nThe data structure for all the inputs necessary to construct the JuMP model.\n\nstruct REoptInputs <: AbstractInputs\n    s::ScenarioType\n    techs::Techs\n    min_sizes::Dict{String, <:Real}  # (techs)\n    max_sizes::Dict{String, <:Real}  # (techs)\n    existing_sizes::Dict{String, <:Real}  # (techs)\n    cap_cost_slope::Dict{String, Any}  # (techs)\n    om_cost_per_kw::Dict{String, <:Real}  # (techs)\n    thermal_cop::Dict{String, <:Real}  # (techs.absorption_chiller)\n    time_steps::UnitRange\n    time_steps_with_grid::Array{Int, 1}\n    time_steps_without_grid::Array{Int, 1}\n    hours_per_time_step::Real\n    months::UnitRange\n    production_factor::DenseAxisArray{<:Real, 2}  # (techs, time_steps)\n    levelization_factor::Dict{String, <:Real,}  # (techs)\n    value_of_lost_load_per_kwh::Array{<:Real, 1}\n    pwf_e::Real\n    pwf_om::Real\n    pwf_fuel::Dict{String, <:Real}\n    pwf_emissions_cost::Dict{String, Float64} # Cost of emissions present worth factors for grid and onsite fuelburn emissions [unitless]\n    pwf_grid_emissions::Dict{String, Float64} # Emissions [lbs] present worth factors for grid emissions [unitless]\n    pwf_offtaker::Real \n    pwf_owner::Real\n    third_party_factor::Real\n    pvlocations::Array{Symbol, 1}\n    maxsize_pv_locations::DenseAxisArray{<:Real, 1}  # indexed on pvlocations\n    pv_to_location::Dict{String, Dict{Symbol, Int64}}  # (techs.pv, pvlocations)\n    ratchets::UnitRange\n    techs_by_exportbin::Dict{Symbol, AbstractArray}  # keys can include [:NEM, :WHL, :CUR]\n    export_bins_by_tech::Dict\n    n_segs_by_tech::Dict{String, Int}\n    seg_min_size::Dict{String, Dict{Int, <:Real}}\n    seg_max_size::Dict{String, Dict{Int, <:Real}}\n    seg_yint::Dict{String, Dict{Int, <:Real}}\n    pbi_pwf::Dict{String, Any}  # (pbi_techs)\n    pbi_max_benefit::Dict{String, Any}  # (pbi_techs)\n    pbi_max_kw::Dict{String, Any}  # (pbi_techs)\n    pbi_benefit_per_kwh::Dict{String, Any}  # (pbi_techs)\n    boiler_efficiency::Dict{String, <:Real}\n    fuel_cost_per_kwh::Dict{String, AbstractArray}  # Fuel cost array for all time_steps\n    ghp_options::UnitRange{Int64}  # Range of the number of GHP options\n    require_ghp_purchase::Int64  # 0/1 binary if GHP purchase is forced/required\n    ghp_heating_thermal_load_served_kw::Array{Float64,2}  # Array of heating load (thermal!) profiles served by GHP\n    ghp_cooling_thermal_load_served_kw::Array{Float64,2}  # Array of cooling load profiles served by GHP\n    space_heating_thermal_load_reduction_with_ghp_kw::Array{Float64,2}  # Array of heating load reduction (thermal!) profile from GHP retrofit\n    cooling_thermal_load_reduction_with_ghp_kw::Array{Float64,2}  # Array of cooling load reduction (thermal!) profile from GHP retrofit\n    ghp_electric_consumption_kw::Array{Float64,2}  # Array of electric load profiles consumed by GHP\n    ghp_installed_cost::Array{Float64,1}  # Array of installed cost for GHP options\n    ghp_om_cost_year_one::Array{Float64,1}  # Array of O&M cost for GHP options    \n    tech_renewable_energy_fraction::Dict{String, <:Real} # (techs)\n    tech_emissions_factors_CO2::Dict{String, <:Real} # (techs)\n    tech_emissions_factors_NOx::Dict{String, <:Real} # (techs)\n    tech_emissions_factors_SO2::Dict{String, <:Real} # (techs)\n    tech_emissions_factors_PM25::Dict{String, <:Real} # (techs)\n    techs_operating_reserve_req_fraction::Dict{String, <:Real} # (techs.all)\n    heating_cop::Dict{String, Array{<:Real, 1}} # (techs.ashp)\n    cooling_cop::Dict{String, Array{<:Real, 1}} # (techs.ashp)\n    heating_cf::Dict{String, Array{<:Real, 1}} # (techs.ashp)\n    cooling_cf::Dict{String, Array{<:Real, 1}} # (techs.ashp)\n    heating_loads_kw::Dict{String, <:Real} # (heating_loads)\n    unavailability::Dict{String, Array{Float64,1}}  # Dict by tech of unavailability profile\nend\n\n\n\n\n\n","category":"type"},{"location":"developer/inputs/#REopt.REoptInputs-Tuple{String}","page":"The REoptInputs structure","title":"REopt.REoptInputs","text":"REoptInputs(fp::String)\n\nUse fp to load in JSON scenario:\n\nfunction REoptInputs(fp::String)\n    s = Scenario(JSON.parsefile(fp))\n    REoptInputs(s)\nend\n\nUseful if you want to manually modify REoptInputs before solving the model.\n\n\n\n\n\n","category":"method"},{"location":"developer/inputs/#REopt.REoptInputs-Tuple{REopt.AbstractScenario}","page":"The REoptInputs structure","title":"REopt.REoptInputs","text":"REoptInputs(s::AbstractScenario)\n\nConstructor for REoptInputs. Translates the Scenario into all the data necessary for building the JuMP model.\n\n\n\n\n\n","category":"method"},{"location":"developer/inputs/#Design-Concepts-for-REoptInputs","page":"The REoptInputs structure","title":"Design Concepts for REoptInputs","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"At a high level the REoptInputs constructor does the following tasks:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"build index sets for the JuMP model decision variables,\ncreate maps from one set to another set,\nand generate coefficient arrays necessary for model constraints.","category":"page"},{"location":"developer/inputs/#Index-Sets","page":"The REoptInputs structure","title":"Index Sets","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"There are a few String[] that are built by REoptInputs that are then used as index sets in the model constraints. The primary index set is the techs.all array of strings, which contains all the technolgy names that are being modeled. With the techs.all array we can easily apply a constraint over all technolgies. For example:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"@constraint(m, [t in p.techs.all],\n    m[Symbol(\"dvSize\"*_n)][t] <= p.max_sizes[t]\n)","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"where p is the REoptInputs struct. There are a couple things to note from this last example:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"The decision variable dvSize is accessed in the JuMP.Model m using the Symbol notation so that this constraint can be used in the multi-node case in addition to the single node case. The _n input value is an empty string by default and in the case of a multi-node model the _n string will be set by the Site.node integer. For example, if Site.node is 3 then _n is \"_3\".\nThe p.max_sizes array is also indexed on p.techs.all. The max_sizes is built in the REoptInputs constructor by using all the technologies in the Scenario that have max_kw values greater than zero.","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"Besides the techs.all array the are many sub-sets, such as techs.pv, techs.gen, techs.elec, p.techs.segmented, techs.no_curtail, that allow us to apply constraints to those sets. For example:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"for t in p.techs.no_curtail\n    for ts in p.time_steps\n        fix(m[Symbol(\"dvCurtail\"*_n)][t, ts] , 0.0, force=true)\n    end\nend","category":"page"},{"location":"developer/inputs/#Set-maps","page":"The REoptInputs structure","title":"Set maps","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"The set maps are best explained with an example. The techs_by_exportbin map uses each technology'sattributes (eg. PV) to map each technology to which export bins that technology can access. The export bins include:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":":NEM (Net Energy Metering)\n:WHL (Wholesale)\n:EXC (Excess, beyond NEM))","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"The bins that a technology can access are determined by the technologies attributes can_net_meter, can_wholesale, and can_export_beyond_nem_limit. So if PV.can_net_meter = true, Wind.can_net_meter = true and all the other attributes are false then the techs_by_exportbin will only have one non-empty key:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"techs_by_exportbin = Dict(\n    :NEM => [\"PV\", \"Wind\"],\n    :WHL => [],\n    :EXC => []\n)","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"A use-case example for the techs_by_exportbin map is defining the net metering benefit:","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"NEM_benefit = @expression(m, p.pwf_e * p.hours_per_time_step *\n    sum( sum(p.s.electric_tariff.export_rates[:NEM][ts] * m[Symbol(\"dvProductionToGrid\"*_n)][t, :NEM, ts] \n        for t in p.techs_by_exportbin[:NEM]) for ts in p.time_steps)\n)","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"Other set maps include: export_bins_by_tech and n_segs_by_tech. The latter tells how many cost curve segments each technology has.","category":"page"},{"location":"developer/inputs/#Coefficient-Arrays","page":"The REoptInputs structure","title":"Coefficient Arrays","text":"","category":"section"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"The JuMP model costs are formulated in net present value terms, accounting for all benefits (production, capacity, and investment incentives) and the total cost over the analysis_period. The REoptInputs constructor translates the raw input parameters, such as the operations and maintenance costs, into present value terms using the provided discount rate. For example, the pwf_e is the present worth factor for electricity that accounts for the elec_cost_escalation_rate_fraction, the analysis_period, and the offtaker_discount_rate_fraction. Note that tax benefits are applied directly in the JuMP model for clarity on which costs are tax-deductible and which are not.","category":"page"},{"location":"developer/inputs/","page":"The REoptInputs structure","title":"The REoptInputs structure","text":"Besides econimic parameters, the REoptInputs constructor also puts together the important production_factor array. The production_factor array is simple for continuously variable generators (such as the Generator), for which the production_factor is 1 in all time steps. However, for variable generators (such as Wind and PV) the production_factor varies by time step. If the user does not provide the PV production factor, for example, then the REoptInputs constructor uses the PVWatts API to download the location specific PV production factor. REoptInputs also accounts for the PV.degradation_fraction in building the production_factor array.","category":"page"},{"location":"mpc/outputs/#MPC-Outputs","page":"MPC Outputs","title":"MPC Outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.mpc_results","category":"page"},{"location":"mpc/outputs/#REopt.mpc_results","page":"MPC Outputs","title":"REopt.mpc_results","text":"MPC Scenarios will return a results Dict with the following keys: \n\nElectricStorage\nHotThermalStorage\nColdThermalStorage \nElectricTariff\nElectricUtility\nPV\nGenerator\n\n\n\n\n\n","category":"function"},{"location":"mpc/outputs/#MPC-ElectricStorage-outputs","page":"MPC Outputs","title":"MPC ElectricStorage outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_electric_storage_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict, ::String)","category":"page"},{"location":"mpc/outputs/#REopt.add_electric_storage_results-Tuple{AbstractModel, MPCInputs, Dict, String}","page":"MPC Outputs","title":"REopt.add_electric_storage_results","text":"MPC ElectricStorage results keys:\n\nsoc_series_fraction Vector of normalized (0-1) state of charge values over time horizon\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-HotThermalStorage-outputs","page":"MPC Outputs","title":"MPC HotThermalStorage outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_hot_storage_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict, ::String)","category":"page"},{"location":"mpc/outputs/#REopt.add_hot_storage_results-Tuple{AbstractModel, MPCInputs, Dict, String}","page":"MPC Outputs","title":"REopt.add_hot_storage_results","text":"MPC HotThermalStorage results keys:\n\nsoc_series_fraction Vector of normalized (0-1) state of charge values over the time horizon [-]\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-ColdThermalStorage-outputs","page":"MPC Outputs","title":"MPC ColdThermalStorage outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_cold_storage_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict, ::String)","category":"page"},{"location":"mpc/outputs/#REopt.add_cold_storage_results-Tuple{AbstractModel, MPCInputs, Dict, String}","page":"MPC Outputs","title":"REopt.add_cold_storage_results","text":"MPC ColdThermalStorage results keys:\n\nsoc_series_fraction Vector of normalized (0-1) state of charge values over the time horizon [-]\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-ElectricTariff-outputs","page":"MPC Outputs","title":"MPC ElectricTariff outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_electric_tariff_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict)","category":"page"},{"location":"mpc/outputs/#REopt.add_electric_tariff_results-Tuple{AbstractModel, MPCInputs, Dict}","page":"MPC Outputs","title":"REopt.add_electric_tariff_results","text":"MPC ElectricTariff results keys:\n\nenergy_cost\ndemand_cost\nexport_benefit\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-ElectricUtility-outputs","page":"MPC Outputs","title":"MPC ElectricUtility outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_electric_utility_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict)","category":"page"},{"location":"mpc/outputs/#REopt.add_electric_utility_results-Tuple{AbstractModel, MPCInputs, Dict}","page":"MPC Outputs","title":"REopt.add_electric_utility_results","text":"MPC ElectricUtility results keys:\n\nenergy_supplied_kwh \nto_battery_series_kw\nto_load_series_kw\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-PV-outputs","page":"MPC Outputs","title":"MPC PV outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_pv_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict)","category":"page"},{"location":"mpc/outputs/#REopt.add_pv_results-Tuple{AbstractModel, MPCInputs, Dict}","page":"MPC Outputs","title":"REopt.add_pv_results","text":"MPC PV results keys:\n\nto_battery_series_kw\nto_grid_series_kw\ncurtailed_production_series_kw\nto_load_series_kw\nenergy_produced_kwh\n\n\n\n\n\n","category":"method"},{"location":"mpc/outputs/#MPC-Generator-outputs","page":"MPC Outputs","title":"MPC Generator outputs","text":"","category":"section"},{"location":"mpc/outputs/","page":"MPC Outputs","title":"MPC Outputs","text":"REopt.add_generator_results(::JuMP.AbstractModel, ::MPCInputs, ::Dict)","category":"page"},{"location":"mpc/outputs/#REopt.add_generator_results-Tuple{AbstractModel, MPCInputs, Dict}","page":"MPC Outputs","title":"REopt.add_generator_results","text":"MPC Generator results keys:\n\nvariable_om_cost\nfuel_cost\nto_battery_series_kw\nto_grid_series_kw\nto_load_series_kw\nannual_fuel_consumption_gal\nenergy_produced_kwh\n\n\n\n\n\n","category":"method"},{"location":"reopt/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"The primary method for using REopt is the run_reopt method. In the simplest there are two required inputs to run_reopt: a JuMP.Model with an optimizer and the path to a JSON file to define the Scenario. Other methods for run_reopt are enumerated below. Other methods such as build_reopt! are also described to allow users to build custom REopt models. For example, after using build_reopt! a user could add constraints or change the objective function using JuMP commands.","category":"page"},{"location":"reopt/methods/#run_reopt","page":"Methods","title":"run_reopt","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"run_reopt","category":"page"},{"location":"reopt/methods/#REopt.run_reopt","page":"Methods","title":"REopt.run_reopt","text":"run_reopt(m::JuMP.AbstractModel, fp::String)\n\nSolve the model using the Scenario defined in JSON file stored at the file path fp.\n\n\n\n\n\nrun_reopt(m::JuMP.AbstractModel, d::Dict)\n\nSolve the model using the Scenario defined in dict d.\n\n\n\n\n\nrun_reopt(m::JuMP.AbstractModel, s::AbstractScenario)\n\nSolve the model using a Scenario or BAUScenario.\n\n\n\n\n\nrun_reopt(t::Tuple{JuMP.AbstractModel, AbstractScenario})\n\nMethod for use with Threads when running BAU in parallel with optimal scenario.\n\n\n\n\n\nrun_reopt(ms::AbstractArray{T, 1}, fp::String) where T <: JuMP.AbstractModel\n\nSolve the Scenario and BAUScenario in parallel using the first two (empty) models in ms and inputs defined in the JSON file at the filepath fp.\n\n\n\n\n\nrun_reopt(ms::AbstractArray{T, 1}, d::Dict) where T <: JuMP.AbstractModel\n\nSolve the Scenario and BAUScenario in parallel using the first two (empty) models in ms and inputs from d.\n\n\n\n\n\nrun_reopt(ms::AbstractArray{T, 1}, p::REoptInputs) where T <: JuMP.AbstractModel\n\nSolve the Scenario and BAUScenario in parallel using the first two (empty) models in ms and inputs from p.\n\n\n\n\n\n","category":"function"},{"location":"reopt/methods/#build_reopt!","page":"Methods","title":"build_reopt!","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"build_reopt!","category":"page"},{"location":"reopt/methods/#REopt.build_reopt!","page":"Methods","title":"REopt.build_reopt!","text":"build_reopt!(m::JuMP.AbstractModel, fp::String)\n\nAdd variables and constraints for REopt model.  fp is used to load in JSON file to construct REoptInputs.\n\n\n\n\n\nbuild_reopt!(m::JuMP.AbstractModel, p::REoptInputs)\n\nAdd variables and constraints for REopt model.\n\n\n\n\n\n","category":"function"},{"location":"reopt/methods/#simulate_outages","page":"Methods","title":"simulate_outages","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"simulate_outages","category":"page"},{"location":"reopt/methods/#REopt.simulate_outages","page":"Methods","title":"REopt.simulate_outages","text":"simulate_outages(;batt_kwh=0, batt_kw=0, pv_kw_ac_hourly=[], init_soc=[], critical_loads_kw=[], \n    wind_kw_ac_hourly=[], batt_roundtrip_efficiency=0.829, diesel_kw=0, fuel_available=0, b=0, m=0, \n    diesel_min_turndown=0.3\n)\n\nTime series simulation of outages starting at every time step of the year. Used to calculate how many time steps the  critical load can be met in every outage, which in turn is used to determine probabilities of meeting the critical load.\n\nArguments\n\nbatt_kwh: float, battery storage capacity\nbatt_kw: float, battery inverter capacity\npv_kw_ac_hourly: list of floats, AC production of PV system\ninit_soc: list of floats between 0 and 1 inclusive, initial state-of-charge\ncritical_loads_kw: list of floats\nwind_kw_ac_hourly: list of floats, AC production of wind turbine\nbatt_roundtrip_efficiency: roundtrip battery efficiency\ndiesel_kw: float, diesel generator capacity\nfuel_available: float, gallons of diesel fuel available\nb: float, diesel fuel burn rate intercept coefficient (y = mx + brated_capacity)  [gal/kwh/kw]\nm: float, diesel fuel burn rate slope (y = mx + brated_capacity)  [gal/kWh]\ndiesel_min_turndown: minimum generator turndown in fraction of generator capacity (0 to 1)\n\nReturns a dict\n\n    \"resilience_by_time_step\": vector of time steps that critical load is met for outage starting in every time step,\n    \"resilience_hours_min\": minimum of \"resilience_by_time_step\",\n    \"resilience_hours_max\": maximum of \"resilience_by_time_step\",\n    \"resilience_hours_avg\": average of \"resilience_by_time_step\",\n    \"outage_durations\": vector of integers for outage durations with non zero probability of survival,\n    \"probs_of_surviving\": vector of probabilities corresponding to the \"outage_durations\",\n    \"probs_of_surviving_by_month\": vector of probabilities calculated on a monthly basis,\n    \"probs_of_surviving_by_hour_of_the_day\":vector of probabilities calculated on a hour-of-the-day basis,\n}\n\n\n\n\n\nsimulate_outages(d::Dict, p::REoptInputs; microgrid_only::Bool=false)\n\nTime series simulation of outages starting at every time step of the year. Used to calculate how many time steps the  critical load can be met in every outage, which in turn is used to determine probabilities of meeting the critical load.\n\nArguments\n\nd::Dict from reopt_results\np::REoptInputs the inputs that generated the Dict from reopt_results\nmicrogrid_only::Bool whether or not to simulate only the optimal microgrid capacities or the total capacities. This input is only relevant when modeling multiple outages.\n\nReturns a dict\n\n{\n    \"resilience_by_time_step\": vector of time steps that critical load is met for outage starting in every time step,\n    \"resilience_hours_min\": minimum of \"resilience_by_time_step\",\n    \"resilience_hours_max\": maximum of \"resilience_by_time_step\",\n    \"resilience_hours_avg\": average of \"resilience_by_time_step\",\n    \"outage_durations\": vector of integers for outage durations with non zero probability of survival,\n    \"probs_of_surviving\": vector of probabilities corresponding to the \"outage_durations\",\n    \"probs_of_surviving_by_month\": vector of probabilities calculated on a monthly basis,\n    \"probs_of_surviving_by_hour_of_the_day\":vector of probabilities calculated on a hour-of-the-day basis,\n}\n\n\n\n\n\n","category":"function"},{"location":"reopt/methods/#backup_reliability","page":"Methods","title":"backup_reliability","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"backup_reliability","category":"page"},{"location":"reopt/methods/#REopt.backup_reliability","page":"Methods","title":"REopt.backup_reliability","text":"backup_reliability(d::Dict, p::REoptInputs, r::Dict)\n\nReturn dictionary of backup reliability results.\n\nArguments\n\nd::Dict: REopt results dictionary. \np::REoptInputs: REopt Inputs Struct.\nr::Dict: Dictionary of inputs for reliability calculations. If r not included then uses all defaults. \n\nPossible keys in r:     -generatoroperationalavailability::Real = 0.995       Fraction of year generators not down for maintenance     -generatorfailuretostart::Real = 0.0094              Chance of generator starting given outage     -generatormeantimetofailure::Real = 1100            Average number of time steps between a generator's failures. 1/(failure to run probability).      -numgenerators::Int = 1                                Number of generators.     -generatorsizekw::Real = 0.0                          Backup generator capacity.      -numbatterybins::Int = depends on battery sizing      Number of bins for discretely modeling battery state of charge     -batteryoperationalavailability::Real = 0.97          Likelihood battery will be available at start of outage            -pvoperationalavailability::Real = 0.98               Likelihood PV will be available at start of outage     -windoperationalavailability::Real = 0.97             Likelihood Wind will be available at start of outage     -maxoutageduration::Int = 96                          Maximum outage duration modeled     -microgrid_only::Bool = false                           Determines how generator, PV, and battery act during islanded mode\n\n\n\n\n\nbackup_reliability(r::Dict)\n\nReturn dictionary of backup reliability results.\n\nArguments\n\nr::Dict: Dictionary of inputs for reliability calculations. If r not included then uses all defaults. \n\nPossible keys in r: -criticalloadskw::Array                               Critical loads per time step. (Required input) -microgridonly::Bool                                   Boolean to check if only microgrid runs during grid outage (defaults to false) -chpsizekw::Real                                      CHP capacity.  -pvsizekw::Real                                       Size of PV System -pvproductionfactorseries::Array                     PV production factor per time step (required if pvsizekw in dictionary) -pvmigrogridupgraded::Bool                            If true then PV runs during outage if microgridonly = TRUE (defaults to false) -batterysizekw::Real                                  Battery capacity. If no battery installed then PV disconnects from system during outage -batterysizekwh::Real                                 Battery energy storage capacity -batterychargeefficiency::Real                        Battery charge efficiency -batterydischargeefficiency::Real                     Battery discharge efficiency -batterystartingsocseriesfraction::Array            Battery percent state of charge time series during normal grid-connected usage -generatorfailuretostart::Real = 0.0094              Chance of generator starting given outage -generatormeantimetofailure::Real = 1100            Average number of time steps between a generator's failures. 1/(failure to run probability).  -numgenerators::Int = 1                                Number of generators.  -generatorsizekw::Real = 0.0                          Backup generator capacity.  -numbatterybins::Int = numbatterybinsdefault(r[:batterysizekw],r[:batterysizekwh])     Number of bins for discretely modeling battery state of charge -maxoutageduration::Int = 96                          Maximum outage duration modeled\n\n\n\n\n\n","category":"function"},{"location":"reopt/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"To use REopt you will need to have a solver installed. REopt.jl has been tested with Xpress, Cbc, and CPLEX solvers, but it should work with other Linear Progam solvers (for PV and Storage scenarios) or Mixed Integer Linear Program solvers (for scenarios with outages and/or Generators).","category":"page"},{"location":"reopt/examples/#Basic","page":"Examples","title":"Basic","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"A REopt optimization can be run with three lines: ","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"using REopt, JuMP, Cbc\n\nm = Model(Cbc.Optimizer)\nresults = run_reopt(m, \"test/scenarios/pv_storage.json\")","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"The scenario.json contains a Dict of inputs. For more on the scenario.json see the REopt Inputs section and find examples at test/scenarios. For more examples of how to run REopt, see test_with_cplex.jl and test_with_xpress.jl","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"To compare the optimized case to a \"Business-as-usual\" case (with existing techs or no techs), you can run the BAUScenario scenario in parallel by providing two JuMP.Models like so:","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"m1 = Model(Cbc.Optimizer)\nm2 = Model(Cbc.Optimizer)\nresults = run_reopt([m1,m2], \"./scenarios/pv_storage.json\")","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"When the BAUScenario is included as shown above, the outputs will include comparative results such as the net present value and emissions reductions of the optimal system as compared to the BAU Scenario.","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"note: BAU Scenario\nNote that while two JuMP models are needed to run the BAU and optimized cases in parallel, only a single input dict is used. The BAUScenario will be automatically created based on the input dict. ","category":"page"},{"location":"reopt/examples/#Advanced","page":"Examples","title":"Advanced","text":"","category":"section"},{"location":"reopt/examples/#Modifying-the-mathematical-model","page":"Examples","title":"Modifying the mathematical model","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"Using the build_reopt! method and JuMP methods one can modify the REopt model before optimizing. In the following example we add a cost for curtailed PV power.","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"using Xpress\nusing JuMP\nusing REopt\n\nm = JuMP.Model(Xpress.Optimizer)\n\np = REoptInputs(\"scenarios/pv_storage.json\");\n\nbuild_reopt!(m, p)\n\n#= \nreplace the original objective, which is to Min the Costs,\nwith the Costs + 100 * (total curtailed PV power)\n=#  \nJuMP.@objective(m, Min, m[:Costs] + 100 * sum(m[:dvCurtail][\"PV\", ts] for ts in p.time_steps));\n\nJuMP.optimize!(m)  # normally this command is called in run_reopt\n\nresults = reopt_results(m, p)","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"One can also add variables and constraints to the model before optimizing using the JuMP commands.","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"note: Note\nThe JuMP. prefixes are not necessary. We include them in the example to show which commands come from JuMP.","category":"page"},{"location":"#REopt.jl","page":"Home","title":"REopt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Renewable Energy Optimization and Integration","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is used as the core model of the REopt API and the REopt Web Tool. This package contains additional functionality and flexibility to run locally and customize.","category":"page"},{"location":"#Installing","page":"Home","title":"Installing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"REopt evaluations for all system types except GHP can be performed using the following installation instructions from the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"REopt\")","category":"page"},{"location":"#Add-NREL-developer-API-key-for-PV-and-Wind","page":"Home","title":"Add NREL developer API key for PV and Wind","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you don't have an NREL developer network API key, sign up here to get one (free): https://developer.nrel.gov/signup/; this is required to load PV and Wind resource profiles from PVWatts and the Wind Toolkit APIs from within REopt.jl. Assign your API key to the expected environment variable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ENV[\"NREL_DEVELOPER_API_KEY\"]=\"your API key\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"before running PV or Wind scenarios.","category":"page"},{"location":"#Additional-package-loading-for-GHP","page":"Home","title":"Additional package loading for GHP","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GHP evaluations must load in the GhpGhx.jl package separately because it has a more restrictive license and is not a registered Julia package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"https://github.com/NREL/GhpGhx.jl\")\nusing GhpGhx","category":"page"},{"location":"reopt/inputs/#REopt-Inputs","page":"REopt Inputs","title":"REopt Inputs","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"Inputs to run_reopt can be provided in one of four formats:","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"a file path (string) to a JSON file,\na Dict, \nusing the Scenario struct, or\nusing the REoptInputs struct","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"Any one of these types can be passed to the run_reopt method as shown in Examples.","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The first option is perhaps the most straightforward. For example, the minimum requirements for a JSON scenario file would look like:","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    }\n}","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The order of the keys does not matter. Note that this scenario does not include any energy generation technologies and therefore the results can be used as a baseline for comparison to scenarios that result in cost-optimal generation technologies (alternatively, a user could include a BAUScenario as shown in Examples).","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"To add PV to the analysis simply add a PV key with an empty dictionary (to use default values):","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    },\n    \"PV\": {}\n}","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"This scenario will consider the option to purchase a solar PV system to reduce energy costs, and if solar PV can reduce the energy costs then REopt will provide the optimal PV capacity (assuming perfect foresight!). See PV for all available input keys and default values for PV. To override a default value, simply specify a value for a given key. For example, the site under consideration might have some existing PV capacity to account for, which can be done by setting the existing_kw key to the appropriate value.","category":"page"},{"location":"reopt/inputs/#Scenario","page":"REopt Inputs","title":"Scenario","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The Scenario struct captures all of the possible user input keys (see REopt Inputs for potential input formats). A Scenario struct will be automatically created if a Dict or file path are supplied to the run_reopt method. Alternatively, a user can create a Scenario struct and supply this to run_reopt. ","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"Scenario","category":"page"},{"location":"reopt/inputs/#REopt.Scenario","page":"REopt Inputs","title":"REopt.Scenario","text":"Scenario(d::Dict; flex_hvac_from_json=false)\n\nA Scenario struct can contain the following keys:\n\nSite (required)\nFinancial (optional)\nElectricTariff (required when off_grid_flag=false)\nElectricLoad (required)\nPV (optional, can be Array)\nWind (optional)\nElectricStorage (optional)\nHotThermalStorage (optional)\nColdThermalStorage (optional)\nElectricStorage (optional)\nElectricUtility (optional)\nGenerator (optional)\nDomesticHotWaterLoad (optional)\nSpaceHeatingLoad (optional)\nProcessHeatLoad (optional)\nCoolingLoad (optional)\nExistingBoiler (optional)\nBoiler (optional)\nCHP (optional)\nFlexibleHVAC (optional)\nExistingChiller (optional)\nAbsorptionChiller (optional)\nGHP (optional, can be Array)\nSteamTurbine (optional)\nElectricHeater (optional)\nASHPSpaceHeater (optional)\nASHPWaterHeater (optional)\n\nAll values of d are expected to be Dicts except for PV and GHP, which can be either a Dict or Dict[] (for multiple PV arrays or GHP options).\n\nnote: Note\nSet flex_hvac_from_json=true if FlexibleHVAC values were loaded in from JSON (necessary to  handle conversion of Vector of Vectors from JSON to a Matrix in Julia).\n\n\n\n\n\nScenario(fp::String)\n\nConsruct Scenario from filepath fp to JSON with keys aligned with the Scenario(d::Dict) method.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#BAUScenario","page":"REopt Inputs","title":"BAUScenario","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The Business-as-usual (BAU) inputs are automatically created based on the BAUScenario struct when a user supplies two JuMP.Models to run_reopt() (as shown in Examples). The outputs of the BAU scenario are used to calculate comparative results such as the Financial net present value (npv).","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.BAUInputs","category":"page"},{"location":"reopt/inputs/#REopt.BAUInputs","page":"REopt Inputs","title":"REopt.BAUInputs","text":"BAUInputs(p::REoptInputs)\n\nTheBAUInputs (REoptInputs for the Business As Usual scenario) are created based on the BAUScenario, which is in turn created based on the optimized-case Scenario.\n\nThe following assumptions are made for the BAU Inputs: \n\nPV and Generator min_kw and max_kw set to the existing_kw values\nExistingBoiler and ExistingChiller  # TODO\nAll other generation and storage tech sizes set to zero \nCapital costs are assumed to be zero for existing PV and Generator\nO&M costs and all other tech inputs are assumed to be the same for existing PV and Generator as those specified for the optimized case\nOutage assumptions for deterministic vs stochastic # TODO \n\n\n\n\n\n","category":"function"},{"location":"reopt/inputs/#Settings","page":"REopt Inputs","title":"Settings","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Settings","category":"page"},{"location":"reopt/inputs/#REopt.Settings","page":"REopt Inputs","title":"REopt.Settings","text":"Captures high-level inputs affecting the optimization.\n\nSettings is an optional REopt input with the following keys and default values:\n\n    time_steps_per_hour::Int = 1 # corresponds to the time steps per hour for user-provided time series (e.g., `ElectricLoad.loads_kw` and `DomesticHotWaterLoad.fuel_loads_mmbtu_per_hour`) \n    add_soc_incentive::Bool = true # when true, an incentive is added to the model's objective function to keep the ElectricStorage SOC high\n    off_grid_flag::Bool = false # true if modeling an off-grid system, not connected to bulk power system\n    include_climate_in_objective::Bool = false # true if climate costs of emissions should be included in the model's objective function\n    include_health_in_objective::Bool = false # true if health costs of emissions should be included in the model's objective function\n    solver_name::String = \"HiGHS\" # solver used to obtain a solution to model instance. available options: [\"HiGHS\", \"Cbc\", \"CPLEX\", \"Xpress\"]\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Site","page":"REopt Inputs","title":"Site","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Site","category":"page"},{"location":"reopt/inputs/#REopt.Site","page":"REopt Inputs","title":"REopt.Site","text":"Inputs related to the physical location:\n\nSite is a required REopt input with the following keys and default values:\n\n    latitude::Real, \n    longitude::Real, \n    land_acres::Union{Real, Nothing} = nothing, # acres of land available for PV panels and/or Wind turbines. Constraint applied separately to PV and Wind, meaning the two technologies are assumed to be able to be co-located.\n    roof_squarefeet::Union{Real, Nothing} = nothing,\n    min_resil_time_steps::Int=0, # The minimum number consecutive timesteps that load must be fully met once an outage begins. Only applies to multiple outage modeling using inputs outage_start_time_steps and outage_durations.\n    mg_tech_sizes_equal_grid_sizes::Bool = true,\n    node::Int = 1,\n    CO2_emissions_reduction_min_fraction::Union{Float64, Nothing} = nothing,\n    CO2_emissions_reduction_max_fraction::Union{Float64, Nothing} = nothing,\n    bau_emissions_lb_CO2_per_year::Union{Float64, Nothing} = nothing, # Auto-populated based on BAU run. This input will be overwritten if the BAU scenario is run, but can be user-provided if no BAU scenario is run.\n    bau_grid_emissions_lb_CO2_per_year::Union{Float64, Nothing} = nothing,\n    renewable_electricity_min_fraction::Real = 0.0,\n    renewable_electricity_max_fraction::Union{Float64, Nothing} = nothing,\n    include_exported_elec_emissions_in_total::Bool = true,\n    include_exported_renewable_electricity_in_total::Bool = true,\n    outdoor_air_temperature_degF::Union{Nothing, Array{<:Real,1}} = nothing,\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricLoad","page":"REopt Inputs","title":"ElectricLoad","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ElectricLoad","category":"page"},{"location":"reopt/inputs/#REopt.ElectricLoad","page":"REopt Inputs","title":"REopt.ElectricLoad","text":"ElectricLoad is a required REopt input with the following keys and default values:\n\n    loads_kw::Array{<:Real,1} = Real[],\n    normalize_and_scale_load_profile_input::Bool = false,  # Takes loads_kw and normalizes and scales it to annual_kwh or monthly_totals_kwh\n    path_to_csv::String = \"\", # for csv containing loads_kw\n    doe_reference_name::String = \"\",\n    blended_doe_reference_names::Array{String, 1} = String[],\n    blended_doe_reference_percents::Array{<:Real,1} = Real[], # Values should be between 0-1 and sum to 1.0\n    year::Union{Int, Nothing} = doe_reference_name ≠ \"\" || blended_doe_reference_names ≠ String[] ? 2017 : nothing, # used in ElectricTariff to align rate schedule with weekdays/weekends. DOE CRB profiles defaults to using 2017. If providing load data, specify year of data.\n    city::String = \"\",\n    annual_kwh::Union{Real, Nothing} = nothing,\n    monthly_totals_kwh::Array{<:Real,1} = Real[],\n    critical_loads_kw::Union{Nothing, Array{Real,1}} = nothing,\n    loads_kw_is_net::Bool = true,\n    critical_loads_kw_is_net::Bool = false,\n    critical_load_fraction::Real = off_grid_flag ? 1.0 : 0.5, # if off grid must be 1.0, else 0.5\n    operating_reserve_required_fraction::Real = off_grid_flag ? 0.1 : 0.0, # if off grid, 10%, else must be 0%. Applied to each time_step as a % of electric load.\n    min_load_met_annual_fraction::Real = off_grid_flag ? 0.99999 : 1.0 # if off grid, 99.999%, else must be 100%. Applied to each time_step as a % of electric load.\n\nnote: Required inputs\nMust provide either loads_kw or path_to_csv or [doe_reference_name and city] or doe_reference_name or [blended_doe_reference_names and blended_doe_reference_percents]. When only doe_reference_name is provided the Site.latitude and Site.longitude are used to look up the ASHRAE climate zone, which determines the appropriate DoE Commercial Reference Building profile.When using the [doe_reference_name and city] option, choose city from one of the cities used to represent the ASHRAE climate zones:Albuquerque\nAtlanta\nBaltimore\nBoulder\nChicago\nDuluth\nFairbanks\nHelena\nHouston\nLosAngeles\nLasVegas\nMiami\nMinneapolis\nPhoenix\nSanFrancisco\nSeattleand doe_reference_name from:FastFoodRest\nFullServiceRest\nHospital\nLargeHotel\nLargeOffice\nMediumOffice\nMidriseApartment\nOutpatient\nPrimarySchool\nRetailStore\nSecondarySchool\nSmallHotel\nSmallOffice\nStripMall\nSupermarket\nWarehouse\nFlatLoad # constant load year-round\nFlatLoad245 # constant load all hours of the weekdays\nFlatLoad167 # two 8-hour shifts for all days of the year; 6-10 a.m.\nFlatLoad165 # two 8-hour shifts for the weekdays; 6-10 a.m.\nFlatLoad87 # one 8-hour shift for all days of the year; 9 a.m.-5 p.m.\nFlatLoad85 # one 8-hour shift for the weekdays; 9 a.m.-5 p.m.Each city and doe_reference_name combination has a default annual_kwh, or you can provide your own annual_kwh or monthly_totals_kwh and the reference profile will be scaled appropriately.\n\nnote: Year\nThe ElectricLoad year is used in ElectricTariff to align rate schedules with weekdays/weekends. If providing your own loads_kw, ensure the year matches the year of your data. If utilizing doe_reference_name or blended_doe_reference_names, the default year of 2017 is used because these load profiles start on a Sunday.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricTariff","page":"REopt Inputs","title":"ElectricTariff","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ElectricTariff()","category":"page"},{"location":"reopt/inputs/#REopt.ElectricTariff-Tuple{}","page":"REopt Inputs","title":"REopt.ElectricTariff","text":"ElectricTariff is a required REopt input for on-grid scenarios only (it cannot be supplied when Settings.off_grid_flag is true) with the following keys and default values:\n\n    urdb_label::String=\"\",\n    urdb_response::Dict=Dict(), # Response JSON for URDB rates. Note: if creating your own urdb_response, ensure periods are zero-indexed.\n    urdb_utility_name::String=\"\",\n    urdb_rate_name::String=\"\",\n    wholesale_rate::T1=nothing, # Price of electricity sold back to the grid in absence of net metering. Can be a scalar value, which applies for all-time, or an array with time-sensitive values. If an array is input then it must have a length of 8760, 17520, or 35040. The inputed array values are up/down-sampled using mean values to match the Settings.time_steps_per_hour.\n    export_rate_beyond_net_metering_limit::T2=nothing, # Price of electricity sold back to the grid beyond total annual grid purchases, regardless of net metering. Can be a scalar value, which applies for all-time, or an array with time-sensitive values. If an array is input then it must have a length of 8760, 17520, or 35040. The inputed array values are up/down-sampled using mean values to match the Settings.time_steps_per_hour\n    monthly_energy_rates::Array=[], # Array (length of 12) of blended energy rates in dollars per kWh\n    monthly_demand_rates::Array=[], # Array (length of 12) of blended demand charges in dollars per kW\n    blended_annual_energy_rate::S=nothing, # Annual blended energy rate [$ per kWh] (total annual energy in kWh divided by annual cost in dollars)\n    blended_annual_demand_rate::R=nothing, # Average monthly demand charge [$ per kW per month]. Rate will be applied to monthly peak demand.\n    add_monthly_rates_to_urdb_rate::Bool=false, # Set to 'true' to add the monthly blended energy rates and demand charges to the URDB rate schedule. Otherwise, blended rates will only be considered if a URDB rate is not provided.\n    tou_energy_rates_per_kwh::Array=[], # Time-of-use energy rates, provided by user. Must be an array with length equal to number of timesteps per year.\n    add_tou_energy_rates_to_urdb_rate::Bool=false, # Set to 'true' to add the tou  energy rates to the URDB rate schedule. Otherwise, tou energy rates will only be considered if a URDB rate is not provided.\n    remove_tiers::Bool=false,\n    demand_lookback_months::AbstractArray{Int64, 1}=Int64[], # Array of 12 binary values, indicating months in which `demand_lookback_percent` applies. If any of these is true, `demand_lookback_range` should be zero.\n    demand_lookback_percent::Real=0.0, # Lookback percentage. Applies to either `demand_lookback_months` with value=1, or months in `demand_lookback_range`.\n    demand_lookback_range::Int=0, # Number of months for which `demand_lookback_percent` applies. If not 0, `demand_lookback_months` should not be supplied.\n    coincident_peak_load_active_time_steps::Vector{Vector{Int64}}=[Int64[]], # The optional coincident_peak_load_charge_per_kw will apply at the max grid-purchased power during these timesteps. Note timesteps are indexed to a base of 1 not 0.\n    coincident_peak_load_charge_per_kw::AbstractVector{<:Real}=Real[] # Optional coincident peak demand charge that is applied to the max load during the timesteps specified in coincident_peak_load_active_time_steps.\n    ) where {\n        T1 <: Union{Nothing, Real, Array{<:Real}}, \n        T2 <: Union{Nothing, Real, Array{<:Real}}, \n        S <: Union{Nothing, Real}, \n        R <: Union{Nothing, Real}\n    }\n\nnote: Export Rates\nThere are three Export tiers and their associated export rates (negative cost values):NEM (Net Energy Metering) - set to the energy rate (or tier with the lowest energy rate, if tiered) \nWHL (Wholesale) - set to wholesale_rate\nEXC (Excess, beyond NEM) - set to exportratebeyondnetmetering_limitOnly one of NEM and Wholesale can be exported into due to the binary constraints. Excess can be exported into in the same time step as NEM.Excess is meant to be combined with NEM: NEM export is limited to the total grid purchased energy in a year and some utilities offer a compensation mechanism for export beyond the site load. The Excess tier is not available with the Wholesale tier.\n\nnote: NEM input\nThe NEM boolean is determined by the ElectricUtility.net_metering_limit_kw. There is no need to pass in a NEM value.\n\nnote: Demand Lookback Inputs\nCannot use both demand_lookback_months and demand_lookback_range inputs, only one or the other. When using lookbacks, the peak demand in each month will be the greater of the peak kW in that month and the peak kW in the lookback months times the demandlookbackpercent. \n\n\n\n\n\n","category":"method"},{"location":"reopt/inputs/#Financial","page":"REopt Inputs","title":"Financial","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Financial","category":"page"},{"location":"reopt/inputs/#REopt.Financial","page":"REopt Inputs","title":"REopt.Financial","text":"Financial is an optional REopt input with the following keys and default values:\n\n    om_cost_escalation_rate_fraction::Real = 0.025,\n    elec_cost_escalation_rate_fraction::Real = 0.017,\n    existing_boiler_fuel_cost_escalation_rate_fraction::Float64 = 0.015, \n    boiler_fuel_cost_escalation_rate_fraction::Real = 0.015,\n    chp_fuel_cost_escalation_rate_fraction::Real = 0.015,\n    generator_fuel_cost_escalation_rate_fraction::Real = 0.012,\n    offtaker_tax_rate_fraction::Real = 0.26, # combined state and federal tax rate\n    offtaker_discount_rate_fraction::Real = 0.0638,\n    third_party_ownership::Bool = false,\n    owner_tax_rate_fraction::Real = 0.26, # combined state and federal tax rate\n    owner_discount_rate_fraction::Real = 0.0638,\n    analysis_years::Int = 25,\n    value_of_lost_load_per_kwh::Union{Array{R,1}, R} where R<:Real = 1.00, #only applies to multiple outage modeling\n    microgrid_upgrade_cost_fraction::Real = 0.0\n    macrs_five_year::Array{Float64,1} = [0.2, 0.32, 0.192, 0.1152, 0.1152, 0.0576],  # IRS pub 946\n    macrs_seven_year::Array{Float64,1} = [0.1429, 0.2449, 0.1749, 0.1249, 0.0893, 0.0892, 0.0893, 0.0446],\n    offgrid_other_capital_costs::Real = 0.0, # only applicable when `off_grid_flag` is true. Straight-line depreciation is applied to this capex cost, reducing taxable income.\n    offgrid_other_annual_costs::Real = 0.0 # only applicable when `off_grid_flag` is true. Considered tax deductible for owner. Costs are per year. \n    # Emissions cost inputs\n    CO2_cost_per_tonne::Real = 51.0,\n    CO2_cost_escalation_rate_fraction::Real = 0.042173,\n    NOx_grid_cost_per_tonne::Union{Nothing,Real} = nothing,\n    SO2_grid_cost_per_tonne::Union{Nothing,Real} = nothing,\n    PM25_grid_cost_per_tonne::Union{Nothing,Real} = nothing,\n    NOx_onsite_fuelburn_cost_per_tonne::Union{Nothing,Real} = nothing, # Default data from EASIUR based on location\n    SO2_onsite_fuelburn_cost_per_tonne::Union{Nothing,Real} = nothing, # Default data from EASIUR based on location\n    PM25_onsite_fuelburn_cost_per_tonne::Union{Nothing,Real} = nothing, # Default data from EASIUR based on location\n    NOx_cost_escalation_rate_fraction::Union{Nothing,Real} = nothing, # Default data from EASIUR based on location\n    SO2_cost_escalation_rate_fraction::Union{Nothing,Real} = nothing, # Default data from EASIUR based on location\n    PM25_cost_escalation_rate_fraction::Union{Nothing,Real} = nothing # Default data from EASIUR based on location\n\nnote: Third party financing\nWhen third_party_ownership is false the offtaker's discount and tax percentages are used throughout the model:    if !third_party_ownership\n        owner_tax_rate_fraction = offtaker_tax_rate_fraction\n        owner_discount_rate_fraction = offtaker_discount_rate_fraction\n    end\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricUtility","page":"REopt Inputs","title":"ElectricUtility","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ElectricUtility","category":"page"},{"location":"reopt/inputs/#REopt.ElectricUtility","page":"REopt Inputs","title":"REopt.ElectricUtility","text":"ElectricUtility is an optional REopt input with the following keys and default values:\n\n    net_metering_limit_kw::Real = 0, # Upper limit on the total capacity of technologies that can participate in net metering agreement.\n    interconnection_limit_kw::Real = 1.0e9, # Limit on total electric system capacity size that can be interconnected to the grid \n    allow_simultaneous_export_import::Bool = true,  # if true the site has two meters (in effect). Set to false if the export rate is greater than the cost of energy (otherwise, REopt will export before meeting site load).\n    \n    # Single Outage Modeling Inputs (Outage Modeling Option 1)\n    outage_start_time_step::Int=0,  # for modeling a single outage, with critical load spliced into the baseline load ...\n    outage_end_time_step::Int=0,  # ... utility production_factor = 0 during the outage\n        \n    # Multiple Outage Modeling Inputs (Outage Modeling Option 2): minimax the expected outage cost,\n    # with max taken over outage start time, expectation taken over outage duration\n    outage_start_time_steps::Array{Int,1}=Int[],  # we minimize the maximum outage cost over outage start times\n    outage_durations::Array{Int,1}=Int[],  # one-to-one with outage_probabilities, outage_durations can be a random variable\n    outage_probabilities::Array{R,1} where R<:Real = [1.0],\n    \n    ### Grid Climate Emissions Inputs ### \n    # Climate Option 1 (Default): Use levelized emissions data from NREL's Cambium database by specifying the following fields:\n    cambium_scenario::String = \"Mid-case\", # Cambium Scenario for evolution of electricity sector (see Cambium documentation for descriptions).\n        ## Options: [\"Mid-case\",  \"Mid-case with tax credit expiration\",  \"Low renewable energy cost\", \"Low renewable energy cost with tax credit expiration\",   \"High renewable energy cost\", \"High electrification\",  \"Low natrual gas prices\", \"High natrual gas prices\", \"Mid-case with 95% decarbonization by 2050\",  \"Mid-case with 100% decarbonization by 2035\"]\n    cambium_location_type::String =  \"GEA Regions\", # Geographic boundary at which emissions are calculated. Options: [\"Nations\", \"GEA Regions\", \"States\"] \n    cambium_metric_col::String =  \"lrmer_co2e\", # Emissions metric used. Default: \"lrmer_co2e\" - Long-run marginal emissions rate for CO2-equivalant, combined combustion and pre-combustion emissions rates. Options: See metric definitions and names in the Cambium documentation\n    cambium_start_year::Int = 2024, # First year of operation of system. Emissions will be levelized starting in this year for the duration of cambium_levelization_years. # Options: any year 2023 through 2050.\n    cambium_levelization_years::Int = analysis_years, # Expected lifetime or analysis period of the intervention being studied. Emissions will be averaged over this period.\n    cambium_grid_level::String = \"enduse\", # Options: [\"enduse\", \"busbar\"]. Busbar refers to point where bulk generating stations connect to grid; enduse refers to point of consumption (includes distribution loss rate). \n\n    # Climate Option 2: Use CO2 emissions data from the EPA's AVERT based on the AVERT emissions region and specify annual percent decrease\n    co2_from_avert::Bool = false, # Default is to use Cambium data for CO2 grid emissions. Set to `true` to instead use data from the EPA's AVERT database. \n\n    # Climate Option 3: Provide your own custom emissions factors for CO2 and specify annual percent decrease  \n    emissions_factor_series_lb_CO2_per_kwh::Union{Real,Array{<:Real,1}} = Float64[], # Custom CO2 emissions profile. Can be scalar or timeseries (aligned with time_steps_per_hour). Ensure emissions year aligns with load year.\n\n    # Used with Climate Options 2 or 3: Annual percent decrease in CO2 emissions factors\n    emissions_factor_CO2_decrease_fraction::Union{Nothing, Real} = co2_from_avert || length(emissions_factor_series_lb_CO2_per_kwh) > 0  ? EMISSIONS_DECREASE_DEFAULTS[\"CO2e\"] : nothing , # Annual percent decrease in the total annual CO2 emissions rate of the grid. A negative value indicates an annual increase.\n\n    ### Grid Health Emissions Inputs ###\n    # Health Option 1 (Default): Use health emissions data from the EPA's AVERT based on the AVERT emissions region and specify annual percent decrease\n    avert_emissions_region::String = \"\", # AVERT emissions region. Default is based on location, or can be overriden by providing region here.\n\n    # Health Option 2: Provide your own custom emissions factors for health emissions and specify annual percent decrease:\n    emissions_factor_series_lb_NOx_per_kwh::Union{Real,Array{<:Real,1}} = Float64[], # Custom NOx emissions profile. Can be scalar or timeseries (aligned with time_steps_per_hour). Ensure emissions year aligns with load year.\n    emissions_factor_series_lb_SO2_per_kwh::Union{Real,Array{<:Real,1}} = Float64[], # Custom SO2 emissions profile. Can be scalar or timeseries (aligned with time_steps_per_hour). Ensure emissions year aligns with load year.\n    emissions_factor_series_lb_PM25_per_kwh::Union{Real,Array{<:Real,1}} = Float64[], # Custom PM2.5 emissions profile. Can be scalar or timeseries (aligned with time_steps_per_hour). Ensure emissions year aligns with load year.\n\n    # Used with Health Options 1 or 2: Annual percent decrease in health emissions factors: \n    emissions_factor_NOx_decrease_fraction::Real = EMISSIONS_DECREASE_DEFAULTS[\"NOx\"], \n    emissions_factor_SO2_decrease_fraction::Real = EMISSIONS_DECREASE_DEFAULTS[\"SO2\"],\n    emissions_factor_PM25_decrease_fraction::Real = EMISSIONS_DECREASE_DEFAULTS[\"PM25\"]\n\nnote: Outage modeling\nIndexingOutage indexing begins at 1 (not 0) and the outage is inclusive of the outage end time step.  For instance, to model a 3-hour outage from 12AM to 3AM on Jan 1, outagestarttimestep = 1 and outageendtimestep = 3. To model a 1-hour outage from 6AM to 7AM on Jan 1, outagestarttimestep = 7 and outageendtimestep = 7.Can use either singular or multiple outage modeling inputs, not bothCannot supply singular outagestart(or end)timestep and multiple outagestarttimesteps. Must use one or the other.Using minresiltime_steps to ensure critical load is metWith multiple outage modeling, the model will choose to meet the critical loads only as cost-optimal. This trade-off depends on cost of not meeting load (see Financial | value_of_lost_load_per_kwh)  and the costs of meeting load, such as microgrid upgrade cost (see Financial | microgrid_upgrade_cost_fraction), fuel costs, and additional DER capacity. To ensure that REopt recommends a system that can meet  critical loads during a defined outage period, specify this duration using Site | min_resil_time_steps.Outage costs will be included in NPV and LCCNote that when using multiple outage modeling, the expected outage cost will be included in the net present value and lifecycle cost calculations (for both the BAU and optimized case).  You can set Financial | value_of_lost_load_per_kwh to 0 to ignore these costs. However, doing so will remove incentive for the model to meet critical loads during outages,  and you should therefore consider also specifying Site | min_resil_time_steps. You can alternatively post-process results to remove lifecycle_outage_cost from the NPV and LCCs.\n\nnote: Outages, Emissions, and Renewable Energy Calculations\nIf a single deterministic outage is modeled using outagestarttimestep and outageendtimestep, emissions and renewable energy percentage calculations and constraints will factor in this outage. If stochastic outages are modeled using outagestarttimesteps, outagedurations, and outage_probabilities, emissions and renewable energy percentage calculations and constraints will not consider outages.\n\nnote: MPC vs. Non-MPC\nThis constructor is intended to be used with latitude/longitude arguments provided for the non-MPC case and without latitude/longitude arguments provided for the MPC case.\n\nnote: Climate and Health Emissions Modeling\nClimate and health-related emissions from grid electricity come from two different data sources and have different REopt inputs as described below. Climate EmissionsFor sites in the contiguous United States: \nDefault climate-related emissions factors come from NREL's Cambium database (Current version: 2022)\nBy default, REopt uses levelized long-run marginal emission rates for CO2-equivalent (CO2e) emissions for the region in which the site is located.    By default, the emissions rates are levelized over the analysis period (e.g., from 2024 through 2048 for a 25-year analysis)\nThe inputs to the Cambium API request can be modified by the user based on emissions accounting needs (e.g., can change \"lifetime\" to 1 to analyze a single year's emissions)\nNote for analysis periods extending beyond 2050: Values beyond 2050 are estimated with the 2050 values. Analysts are advised to use caution when selecting values that place significant weight on 2050 (e.g., greater than 50%)\nUsers can alternatively choose to use emissions factors from the EPA's AVERT by setting co2_from_avert to true\nFor Alaska and HI: Grid CO2e emissions rates for AK and HI come from the eGRID database. These are single values repeated throughout the year. The default annual emissionsfactorCO2decreasefraction will be applied to this rate to account for future greening of the grid.   \nFor sites outside of the United States: We currently do not have default grid emissions rates for sites outside of the U.S. For these sites, users must supply custom emissions factor series (e.g., emissionsfactorserieslbCO2perkwh) and projected emissions decreases (e.g., emissionsfactorCO2decreasefraction). Health EmissionsFor sites in the contiguous United States: health-related emissions factors (PM2.5, SO2, and NOx) come from the EPA's AVERT database. \nThe default avert_emissions_region input is determined by the site's latitude and longitude. Alternatively, you may input the desired AVERT avert_emissions_region, which must be one of:  [\"California\", \"Central\", \"Florida\", \"Mid-Atlantic\", \"Midwest\", \"Carolinas\", \"New England\",  \"Northwest\", \"New York\", \"Rocky Mountains\", \"Southeast\", \"Southwest\", \"Tennessee\", \"Texas\",  \"Alaska\", \"Hawaii (except Oahu)\", \"Hawaii (Oahu)\"]\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#PV","page":"REopt Inputs","title":"PV","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.PV","category":"page"},{"location":"reopt/inputs/#REopt.PV","page":"REopt Inputs","title":"REopt.PV","text":"PV is an optional REopt input with the following keys and default values:\n\n    array_type::Int=1, # PV Watts array type (0: Ground Mount Fixed (Open Rack); 1: Rooftop, Fixed; 2: Ground Mount 1-Axis Tracking; 3 : 1-Axis Backtracking; 4: Ground Mount, 2-Axis Tracking)\n    tilt::Real = (array_type == 0 || array_type == 1) ? 20 : 0, # tilt = 20 for fixed rooftop arrays (1) or ground-mount (2) ; tilt = 0 for everything else (3 and 4)\n    module_type::Int=0, # PV module type (0: Standard; 1: Premium; 2: Thin Film)\n    losses::Real=0.14, # System losses\n    azimuth::Real = latitude≥0 ? 180 : 0, # set azimuth to zero for southern hemisphere\n    gcr::Real=0.4,  # Ground coverage ratio\n    radius::Int=0, # Radius, in miles, to use when searching for the closest climate data station. Use zero to use the closest station regardless of the distance\n    name::String=\"PV\", # for use with multiple pvs \n    location::String=\"both\", # one of [\"roof\", \"ground\", \"both\"]\n    existing_kw::Real=0,\n    min_kw::Real=0,\n    max_kw::Real=1.0e9, # max new DC capacity (beyond existing_kw)\n    installed_cost_per_kw::Real=1790.0,\n    om_cost_per_kw::Real=18.0,\n    degradation_fraction::Real=0.005,\n    macrs_option_years::Int = 5,\n    macrs_bonus_fraction::Real = 0.6,\n    macrs_itc_reduction::Real = 0.5,\n    kw_per_square_foot::Real=0.01,\n    acres_per_kw::Real=6e-3,\n    inv_eff::Real=0.96,\n    dc_ac_ratio::Real=1.2,\n    production_factor_series::Union{Nothing, Array{<:Real,1}} = nothing, # Optional user-defined production factors. Must be normalized to units of kW-AC/kW-DC nameplate. The series must be one year (January through December) of hourly, 30-minute, or 15-minute generation data.\n    federal_itc_fraction::Real = 0.3,\n    federal_rebate_per_kw::Real = 0.0,\n    state_ibi_fraction::Real = 0.0,\n    state_ibi_max::Real = 1.0e10,\n    state_rebate_per_kw::Real = 0.0,\n    state_rebate_max::Real = 1.0e10,\n    utility_ibi_fraction::Real = 0.0,\n    utility_ibi_max::Real = 1.0e10,\n    utility_rebate_per_kw::Real = 0.0,\n    utility_rebate_max::Real = 1.0e10,\n    production_incentive_per_kwh::Real = 0.0,\n    production_incentive_max_benefit::Real = 1.0e9,\n    production_incentive_years::Int = 1,\n    production_incentive_max_kw::Real = 1.0e9,\n    can_net_meter::Bool = off_grid_flag ? false : true,\n    can_wholesale::Bool = off_grid_flag ? false : true,\n    can_export_beyond_nem_limit::Bool = off_grid_flag ? false : true,\n    can_curtail::Bool = true,\n    operating_reserve_required_fraction::Real = off_grid_flag ? 0.25 : 0.0, # if off grid, 25%, else 0%. Applied to each time_step as a % of PV generation.\n\nnote: Multiple PV types\nMultiple PV types can be considered by providing an array of PV inputs. See example in src/test/scenarios/multiple_pvs.json\n\nnote: PV tilt and aziumth\nIf tilt is not provided, then it is set to the absolute value of Site.latitude for ground-mount systems and is set to 10 degrees for rooftop systems. If azimuth is not provided, then it is set to 180 if the site is in the northern hemisphere and 0 if in the southern hemisphere.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Wind","page":"REopt Inputs","title":"Wind","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Wind","category":"page"},{"location":"reopt/inputs/#REopt.Wind","page":"REopt Inputs","title":"REopt.Wind","text":"Wind is an optional REopt input with the following keys and default values:\n\n    min_kw = 0.0,\n    max_kw = 1.0e9,\n    installed_cost_per_kw = nothing,\n    om_cost_per_kw = 36.0,\n    production_factor_series = nothing, # Optional user-defined production factors. Must be normalized to units of kW-AC/kW-DC nameplate. The series must be one year (January through December) of hourly, 30-minute, or 15-minute generation data.\n    size_class = \"\",\n    wind_meters_per_sec = [],\n    wind_direction_degrees = [],\n    temperature_celsius = [],\n    pressure_atmospheres = [],\n    acres_per_kw = 0.03, # assuming a power density of 30 acres per MW for turbine sizes >= 1.5 MW. No size constraint applied to turbines below 1.5 MW capacity. (not exposed in API)\n    macrs_option_years = 5,\n    macrs_bonus_fraction = 0.6,\n    macrs_itc_reduction = 0.5,\n    federal_itc_fraction = 0.3,\n    federal_rebate_per_kw = 0.0,\n    state_ibi_fraction = 0.0,\n    state_ibi_max = 1.0e10,\n    state_rebate_per_kw = 0.0,\n    state_rebate_max = 1.0e10,\n    utility_ibi_fraction = 0.0,\n    utility_ibi_max = 1.0e10,\n    utility_rebate_per_kw = 0.0,\n    utility_rebate_max = 1.0e10,\n    production_incentive_per_kwh = 0.0,\n    production_incentive_max_benefit = 1.0e9,\n    production_incentive_years = 1,\n    production_incentive_max_kw = 1.0e9,\n    can_net_meter = true,\n    can_wholesale = true,\n    can_export_beyond_nem_limit = true\n    operating_reserve_required_fraction::Real = off_grid_flag ? 0.50 : 0.0, # Only applicable when `off_grid_flag` is true. Applied to each time_step as a % of wind generation serving load.\n\nnote: Default assumptions\nsize_class must be one of [\"residential\", \"commercial\", \"medium\", \"large\"]. If size_class is not provided then it is determined based on the average electric load.If no installed_cost_per_kw is provided then it is determined from:size_class_to_installed_cost = Dict(\n    \"residential\"=> 6339.0,\n    \"commercial\"=> 4760.0,\n    \"medium\"=> 3137.0,\n    \"large\"=> 2386.0\n)If the production_factor_series is not provided then NREL's System Advisor Model (SAM) is used to get the wind turbine  production factor.\n\nnote: Wind resource value inputs\nWind resource values are optional (i.e., wind_meters_per_sec, wind_direction_degrees, temperature_celsius, and pressure_atmospheres). If not provided then the resource values are downloaded from NREL's Wind Toolkit. These values are passed to SAM to get the turbine production factor.\n\nnote: Wind sizing and land constraint\nWind size is constrained by Site.landacres, assuming a power density of Wind.acresper_kw for turbine sizes above 1.5 MW (default assumption of 30 acres per MW).  If the turbine size recommended is smaller than 1.5 MW, the input for land available will not constrain the system size.  If the the land available constrains the system size to less than 1.5 MW, the system will be capped at 1.5 MW (i.e., turbines < 1.5 MW are not subject to the acres/kW limit).  \n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricStorage","page":"REopt Inputs","title":"ElectricStorage","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ElectricStorageDefaults\nREopt.Degradation","category":"page"},{"location":"reopt/inputs/#REopt.ElectricStorageDefaults","page":"REopt Inputs","title":"REopt.ElectricStorageDefaults","text":"ElectricStorage is an optional optional REopt input with the following keys and default values:\n\n    min_kw::Real = 0.0\n    max_kw::Real = 1.0e4\n    min_kwh::Real = 0.0\n    max_kwh::Real = 1.0e6\n    internal_efficiency_fraction::Float64 = 0.975\n    inverter_efficiency_fraction::Float64 = 0.96\n    rectifier_efficiency_fraction::Float64 = 0.96\n    soc_min_fraction::Float64 = 0.2\n    soc_min_applies_during_outages::Bool = false\n    soc_init_fraction::Float64 = off_grid_flag ? 1.0 : 0.5\n    can_grid_charge::Bool = off_grid_flag ? false : true\n    installed_cost_per_kw::Real = 910.0\n    installed_cost_per_kwh::Real = 455.0\n    replace_cost_per_kw::Real = 715.0\n    replace_cost_per_kwh::Real = 318.0\n    inverter_replacement_year::Int = 10\n    battery_replacement_year::Int = 10\n    macrs_option_years::Int = 7\n    macrs_bonus_fraction::Float64 = 0.6\n    macrs_itc_reduction::Float64 = 0.5\n    total_itc_fraction::Float64 = 0.3\n    total_rebate_per_kw::Real = 0.0\n    total_rebate_per_kwh::Real = 0.0\n    charge_efficiency::Float64 = rectifier_efficiency_fraction * internal_efficiency_fraction^0.5\n    discharge_efficiency::Float64 = inverter_efficiency_fraction * internal_efficiency_fraction^0.5\n    grid_charge_efficiency::Float64 = can_grid_charge ? charge_efficiency : 0.0\n    model_degradation::Bool = false\n    degradation::Dict = Dict()\n    minimum_avg_soc_fraction::Float64 = 0.0\n    min_duration_hours::Real = 0.0 # Minimum amount of time storage can discharge at its rated power capacity\n    max_duration_hours::Real = 100000.0 # Maximum amount of time storage can discharge at its rated power capacity (ratio of ElectricStorage size_kwh to size_kw)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Generator","page":"REopt Inputs","title":"Generator","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Generator","category":"page"},{"location":"reopt/inputs/#REopt.Generator","page":"REopt Inputs","title":"REopt.Generator","text":"Generator is an optional REopt input with the following keys and default values:\n\n    only_runs_during_grid_outage::Bool = true,\n    existing_kw::Real = 0,\n    min_kw::Real = 0,\n    max_kw::Real = 1.0e6,\n    installed_cost_per_kw::Real = off_grid_flag ? 880 : only_runs_during_grid_outage ? 650.0 : 800.0,\n    om_cost_per_kw::Real = off_grid_flag ? 10.0 : 20.0,\n    om_cost_per_kwh::Real = 0.0,\n    fuel_cost_per_gallon::Real = 3.61,\n    electric_efficiency_full_load::Real = 0.322,\n    electric_efficiency_half_load::Real = electric_efficiency_full_load,\n    fuel_avail_gal::Real = 1.0e9,\n    fuel_higher_heating_value_kwh_per_gal::Real = 40.7,\n    min_turn_down_fraction::Real = off_grid_flag ? 0.15 : 0.0,\n    sells_energy_back_to_grid::Bool = false,\n    can_net_meter::Bool = false,\n    can_wholesale::Bool = false,\n    can_export_beyond_nem_limit = false,\n    can_curtail::Bool = false,\n    macrs_option_years::Int = 0,\n    macrs_bonus_fraction::Real = 0.0,\n    macrs_itc_reduction::Real = 0.0,\n    federal_itc_fraction::Real = 0.0,\n    federal_rebate_per_kw::Real = 0.0,\n    state_ibi_fraction::Real = 0.0,\n    state_ibi_max::Real = 1.0e10,\n    state_rebate_per_kw::Real = 0.0,\n    state_rebate_max::Real = 1.0e10,\n    utility_ibi_fraction::Real = 0.0,\n    utility_ibi_max::Real = 1.0e10,\n    utility_rebate_per_kw::Real = 0.0,\n    utility_rebate_max::Real = 1.0e10,\n    production_incentive_per_kwh::Real = 0.0,\n    production_incentive_max_benefit::Real = 1.0e9,\n    production_incentive_years::Int = 0,\n    production_incentive_max_kw::Real = 1.0e9,\n    fuel_renewable_energy_fraction::Real = 0.0,\n    emissions_factor_lb_CO2_per_gal::Real = 22.58, # CO2e\n    emissions_factor_lb_NOx_per_gal::Real = 0.0775544,\n    emissions_factor_lb_SO2_per_gal::Real = 0.040020476,\n    emissions_factor_lb_PM25_per_gal::Real = 0.0,\n    replacement_year::Int = off_grid_flag ? 10 : analysis_years, # Project year in which generator capacity will be replaced at a cost of replace_cost_per_kw.\n    replace_cost_per_kw::Real = off_grid_flag ? installed_cost_per_kw : 0.0 # Per kW replacement cost for generator capacity. Replacement costs are considered tax deductible.\n\nnote: Replacement costs\nGenerator replacement costs will not be considered if Generator.replacement_year >= Financial.analysis_years.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ExistingBoiler","page":"REopt Inputs","title":"ExistingBoiler","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ExistingBoiler","category":"page"},{"location":"reopt/inputs/#REopt.ExistingBoiler","page":"REopt Inputs","title":"REopt.ExistingBoiler","text":"ExistingBoiler is an optional REopt input with the following keys and default values:\n\n    max_heat_demand_kw::Real=0, # Auto-populated based on SpaceHeatingLoad and DomesticHotWaterLoad inputs\n    production_type::String = \"hot_water\", # Can be \"steam\" or \"hot_water\"\n    max_thermal_factor_on_peak_load::Real = 1.25,\n    efficiency::Real = NaN, # Existing boiler system efficiency - conversion of fuel to usable heating thermal energy. See note below.\n    fuel_cost_per_mmbtu::Union{<:Real, AbstractVector{<:Real}} = [], # REQUIRED. Can be a scalar, a list of 12 monthly values, or a time series of values for every time step\n    fuel_type::String = \"natural_gas\", # \"restrict_to\": [\"natural_gas\", \"landfill_bio_gas\", \"propane\", \"diesel_oil\"]\n    can_supply_steam_turbine::Bool = false,\n    retire_in_optimal::Bool = false,  # Do NOT use in the optimal case (still used in BAU)\n    fuel_renewable_energy_fraction::Real = get(FUEL_DEFAULTS[\"fuel_renewable_energy_fraction\"],fuel_type,0),\n    emissions_factor_lb_CO2_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_CO2_per_mmbtu\"],fuel_type,0),\n    emissions_factor_lb_NOx_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_NOx_per_mmbtu\"],fuel_type,0),\n    emissions_factor_lb_SO2_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_SO2_per_mmbtu\"],fuel_type,0),\n    emissions_factor_lb_PM25_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_PM25_per_mmbtu\"],fuel_type,0)\n    can_serve_dhw::Bool = true # If ExistingBoiler can supply heat to the domestic hot water load\n    can_serve_space_heating::Bool = true # If ExistingBoiler can supply heat to the space heating load\n    can_serve_process_heat::Bool = true # If ExistingBoiler can supply heat to the process heating load\n\nnote: Max ExistingBoiler size\nThe maximum size [kW] of the ExistingBoiler will be set based on the peak heat demand as follows:max_kw = max_heat_demand_kw * max_thermal_factor_on_peak_load\n\nnote: ExistingBoiler operating costs\nThe ExistingBoiler's fuel_cost_per_mmbtu field is a required input. The fuel_cost_per_mmbtu can be a scalar, a list of 12 monthly values, or a time series of values for every time step.\n\nnote: Determining `efficiency`\nMust supply either: efficiency or production_type.If efficiency is not supplied, the efficiency will be determined based on the production_type.  If production_type is not supplied, it defaults to hot_water. The following defaults are used:existing_boiler_efficiency_defaults = Dict(\n    \"hot_water\" => 0.8,\n    \"steam\" => 0.75\n)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#CHP","page":"REopt Inputs","title":"CHP","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.CHP","category":"page"},{"location":"reopt/inputs/#REopt.CHP","page":"REopt Inputs","title":"REopt.CHP","text":"CHP is an optional REopt input with the following keys and default values:\n\n    prime_mover::Union{String, Nothing} = nothing # Suggested to inform applicable default cost and performance. \"restrict_to\": [\"recip_engine\", \"micro_turbine\", \"combustion_turbine\", \"fuel_cell\"]\n    fuel_cost_per_mmbtu::Union{<:Real, AbstractVector{<:Real}} = [] # REQUIRED. Can be a scalar, a list of 12 monthly values, or a time series of values for every time step\n\n    # Required \"custom inputs\" if not providing prime_mover:\n    installed_cost_per_kw::Union{Float64, AbstractVector{Float64}} = NaN # Installed CHP system cost in $/kW (based on rated electric power)\n    tech_sizes_for_cost_curve::Union{Float64, AbstractVector{Float64}} = NaN # Size of CHP systems corresponding to installed cost input points\"\n    om_cost_per_kwh::Float64 = NaN # CHP non-fuel variable operations and maintenance costs in $/kwh\n    electric_efficiency_full_load::Float64 = NaN # Electric efficiency of CHP prime-mover at full-load, HHV-basis\n    electric_efficiency_half_load::Float64 = NaN # Electric efficiency of CHP prime-mover at half-load, HHV-basis\n    min_turn_down_fraction::Float64 = NaN # Minimum CHP electric loading in fraction of capacity (size_kw)\n    thermal_efficiency_full_load::Float64 = NaN # CHP fraction of fuel energy converted to hot-thermal energy at full electric load\n    thermal_efficiency_half_load::Float64 = NaN # CHP fraction of fuel energy converted to hot-thermal energy at half electric load\n    min_allowable_kw::Float64 = NaN # Minimum CHP size (based on electric) that still allows the model to choose zero (e.g. no CHP system)\n    cooling_thermal_factor::Float64 = NaN  # only needed with cooling load\n    unavailability_periods::AbstractVector{Dict} = Dict[] # CHP unavailability periods for scheduled and unscheduled maintenance, list of dictionaries with keys of \"['month', 'start_week_of_month', 'start_day_of_week', 'start_hour', 'duration_hours'] all values are one-indexed and start_day_of_week uses 1 for Monday, 7 for Sunday\n    unavailability_hourly::AbstractVector{Int64} = Int64[] # Hourly 8760 profile of unavailability (1) and availability (0)\n\n    # Optional inputs:\n    size_class::Union{Int, Nothing} = nothing # CHP size class for using appropriate default inputs, with size_class=0 using an average of all other size class data \n    min_kw::Float64 = 0.0 # Minimum CHP size (based on electric) constraint for optimization \n    max_kw::Float64 = NaN # Maximum CHP size (based on electric) constraint for optimization. Determined by heuristic sizing based on heating load or electric load.    \n    fuel_type::String = \"natural_gas\" # \"restrict_to\": [\"natural_gas\", \"landfill_bio_gas\", \"propane\", \"diesel_oil\"]\n    om_cost_per_kw::Float64 = 0.0 # Annual CHP fixed operations and maintenance costs in $/kw-yr \n    om_cost_per_hr_per_kw_rated::Float64 = 0.0 # CHP non-fuel variable operations and maintenance costs in $/hr/kw_rated\n    supplementary_firing_capital_cost_per_kw::Float64 = 150.0 # Installed CHP supplementary firing system cost in $/kW (based on rated electric power)\n    supplementary_firing_max_steam_ratio::Float64 = 1.0 # Ratio of max fired steam to un-fired steam production. Relevant only for combustion_turbine prime_mover \n    supplementary_firing_efficiency::Float64 = 0.92 # Thermal efficiency of the incremental steam production from supplementary firing. Relevant only for combustion_turbine prime_mover \n    standby_rate_per_kw_per_month::Float64 = 0.0 # Standby rate charged to CHP based on CHP electric power size\n    reduces_demand_charges::Bool = true # Boolean indicator if CHP does not reduce demand charges \n    can_supply_steam_turbine::Bool=false # If CHP can supply steam to the steam turbine for electric production \n    can_serve_dhw::Bool = true # If CHP can supply heat to the domestic hot water load\n    can_serve_space_heating::Bool = true # If CHP can supply heat to the space heating load\n    can_serve_process_heat::Bool = true # If CHP can supply heat to the process heating load\n    is_electric_only::Bool = false # If CHP is a prime generator that does not supply heat\n\n    macrs_option_years::Int = 5\n    macrs_bonus_fraction::Float64 = 0.6\n    macrs_itc_reduction::Float64 = 0.5\n    federal_itc_fraction::Float64 = 0.3\n    federal_rebate_per_kw::Float64 = 0.0\n    state_ibi_fraction::Float64 = 0.0\n    state_ibi_max::Float64 = 1.0e10\n    state_rebate_per_kw::Float64 = 0.0\n    state_rebate_max::Float64 = 1.0e10\n    utility_ibi_fraction::Float64 = 0.0\n    utility_ibi_max::Float64 = 1.0e10\n    utility_rebate_per_kw::Float64 = 0.0\n    utility_rebate_max::Float64 = 1.0e10\n    production_incentive_per_kwh::Float64 = 0.0\n    production_incentive_max_benefit::Float64 = 1.0e9\n    production_incentive_years::Int = 0\n    production_incentive_max_kw::Float64 = 1.0e9\n    can_net_meter::Bool = false\n    can_wholesale::Bool = false\n    can_export_beyond_nem_limit::Bool = false\n    can_curtail::Bool = false\n    fuel_renewable_energy_fraction::Float64 = FUEL_DEFAULTS[\"fuel_renewable_energy_fraction\"][fuel_type]\n    emissions_factor_lb_CO2_per_mmbtu::Float64 = FUEL_DEFAULTS[\"emissions_factor_lb_CO2_per_mmbtu\"][fuel_type]\n    emissions_factor_lb_NOx_per_mmbtu::Float64 = FUEL_DEFAULTS[\"emissions_factor_lb_NOx_per_mmbtu\"][fuel_type]\n    emissions_factor_lb_SO2_per_mmbtu::Float64 = FUEL_DEFAULTS[\"emissions_factor_lb_SO2_per_mmbtu\"][fuel_type]\n    emissions_factor_lb_PM25_per_mmbtu::Float64 = FUEL_DEFAULTS[\"emissions_factor_lb_PM25_per_mmbtu\"][fuel_type]\n\nnote: Defaults and required inputs\nSee the get_chp_defaults_prime_mover_size_class() function docstring for details on the logic of choosing the type of CHP that is modeled If no information is provided, the default prime_mover is recip_engine and the size_class is 0 which represents the widest range of sizes available.fuel_cost_per_mmbtu is always required and can be a scalar, a list of 12 monthly values, or a time series of values for every time step\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#AbsorptionChiller","page":"REopt Inputs","title":"AbsorptionChiller","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.AbsorptionChiller","category":"page"},{"location":"reopt/inputs/#REopt.AbsorptionChiller","page":"REopt Inputs","title":"REopt.AbsorptionChiller","text":"AbsorptionChiller is an optional REopt input with the following keys and default values:\n\n    thermal_consumption_hot_water_or_steam::Union{String, Nothing} = nothing  # Defaults to \"hot_water\" if chp_prime_mover or boiler_type are not provided\n    chp_prime_mover::String = \"\"  # Informs thermal_consumption_hot_water_or_steam if not provided\n\n    # Defaults for fields below are dependent on thermal_consumption_hot_water_or_steam and max cooling load\n    installed_cost_per_ton::Union{Float64, Nothing} = nothing # Thermal power-based cost of absorption chiller (3.5 to 1 ton to kwt)\n    om_cost_per_ton::Union{Float64, Nothing} = nothing # Yearly fixed O&M cost on a thermal power (ton) basis\n    min_ton::Float64 = 0.0, # Minimum thermal power size constraint for optimization\n    max_ton::Float64 = BIG_NUMBER, # Maximum thermal power size constraint for optimization\n    cop_thermal::Union{Float64, Nothing} = nothing, # Absorption chiller system coefficient of performance - conversion of hot thermal power input to usable cooling thermal energy output\n    cop_electric::Float64 = 14.1, # Absorption chiller electric consumption CoP from cooling tower heat rejection - conversion of electric power input to usable cooling thermal energy outpu\n    macrs_option_years::Float64 = 0, # MACRS schedule for financial analysis. Set to zero to disable\n    macrs_bonus_fraction::Float64 = 0 # Percent of upfront project costs to depreciate under MACRS\n    heating_load_input::Union{String, Nothing} = nothing # heating load that serves as input to absorption chiller\n\n!!! Note     To model AbsorptionChiller, there is logic which informs defaults for costs and COP:      (i) thermal_consumption_hot_water_or_steam from [\"steam\", \"hotwater\"],      (ii) `chpprimemover` from [\"recipengine\", \"microturbine\", \"combustionturbine\", \"fuelcell\"], or      (iii) if (i) and (ii) are not provided, the default `thermalconsumptionhotwaterorsteamishotwater`     The defaults for costs and COP will be populated from data/absorptionchiller/defaults.json,      based on the thermal_consumption_hot_water_or_steam or chp_prime_mover.      boiler_type is \"steam\" if prime_mover is \"combustionturbine\" and is \"hotwater\" for all other chp_prime_mover types.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Boiler","page":"REopt Inputs","title":"Boiler","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.Boiler","category":"page"},{"location":"reopt/inputs/#REopt.Boiler","page":"REopt Inputs","title":"REopt.Boiler","text":"Boiler\n\nWhen modeling a heating load an ExistingBoiler model is created even if user does not provide the ExistingBoiler key. The Boiler model is not created by default. If a user provides the Boiler key then the optimal scenario has the option to purchase this new Boiler to meet the heating load in addition to using the ExistingBoiler to meet the heating load. \n\nfunction Boiler(;\n    min_mmbtu_per_hour::Real = 0.0, # Minimum thermal power size\n    max_mmbtu_per_hour::Real = 0.0, # Maximum thermal power size\n    efficiency::Real = 0.8, # boiler system efficiency - conversion of fuel to usable heating thermal energy\n    fuel_cost_per_mmbtu::Union{<:Real, AbstractVector{<:Real}} = 0.0,\n    macrs_option_years::Int = 0, # MACRS schedule for financial analysis. Set to zero to disable\n    macrs_bonus_fraction::Real = 0.0, # Fraction of upfront project costs to depreciate under MACRS\n    installed_cost_per_mmbtu_per_hour::Real = 293000.0, # Thermal power-based cost\n    om_cost_per_mmbtu_per_hour::Real = 2930.0, # Thermal power-based fixed O&M cost\n    om_cost_per_mmbtu::Real = 0.0, # Thermal energy-based variable O&M cost\n    fuel_type::String = \"natural_gas\",  # \"restrict_to\": [\"natural_gas\", \"landfill_bio_gas\", \"propane\", \"diesel_oil\", \"uranium\"]\n    can_supply_steam_turbine::Bool = true # If the boiler can supply steam to the steam turbine for electric production\n    can_serve_dhw::Bool = true # If Boiler can supply heat to the domestic hot water load\n    can_serve_space_heating::Bool = true # If Boiler can supply heat to the space heating load\n    can_serve_process_heat::Bool = true # If Boiler can supply heat to the process heating load\n    emissions_factor_lb_CO2_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_CO2_per_mmbtu\"],fuel_type,0)\n    emissions_factor_lb_NOx_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_NOx_per_mmbtu\"],fuel_type,0)\n    emissions_factor_lb_SO2_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_SO2_per_mmbtu\"],fuel_type,0)\n    emissions_factor_lb_PM25_per_mmbtu::Real = get(FUEL_DEFAULTS[\"emissions_factor_lb_PM25_per_mmbtu\"],fuel_type,0)\n)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#HotThermalStorage","page":"REopt Inputs","title":"HotThermalStorage","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.HotThermalStorageDefaults","category":"page"},{"location":"reopt/inputs/#REopt.HotThermalStorageDefaults","page":"REopt Inputs","title":"REopt.HotThermalStorageDefaults","text":"HotThermalStorage is an optional REopt input with the following keys and default values:\n\n    min_gal::Float64 = 0.0\n    max_gal::Float64 = 0.0\n    hot_water_temp_degF::Float64 = 180.0\n    cool_water_temp_degF::Float64 = 160.0\n    internal_efficiency_fraction::Float64 = 0.999999\n    soc_min_fraction::Float64 = 0.1\n    soc_init_fraction::Float64 = 0.5\n    installed_cost_per_gal::Float64 = 1.50\n    thermal_decay_rate_fraction::Float64 = 0.0004\n    om_cost_per_gal::Float64 = 0.0\n    macrs_option_years::Int = 7\n    macrs_bonus_fraction::Float64 = 0.6\n    macrs_itc_reduction::Float64 = 0.5\n    total_itc_fraction::Float64 = 0.3\n    total_rebate_per_kwh::Float64 = 0.0\n    can_serve_dhw::Bool = true\n    can_serve_space_heating:Bool = true\n    can_serve_process_heat::Bool = false\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ColdThermalStorage","page":"REopt Inputs","title":"ColdThermalStorage","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ColdThermalStorageDefaults","category":"page"},{"location":"reopt/inputs/#REopt.ColdThermalStorageDefaults","page":"REopt Inputs","title":"REopt.ColdThermalStorageDefaults","text":"Cold thermal energy storage sytem; specifically, a chilled water system used to meet thermal cooling loads.\n\nColdThermalStorage is an optional REopt input with the following keys and default values:\n\n    min_gal::Float64 = 0.0\n    max_gal::Float64 = 0.0\n    hot_water_temp_degF::Float64 = 56.0 # Warmed-side return water temperature from the cooling load to the ColdTES (top of tank)\n    cool_water_temp_degF::Float64 = 44.0 # Chilled-side supply water temperature from ColdTES (bottom of tank) to the cooling load\n    internal_efficiency_fraction::Float64 = 0.999999 # Thermal losses due to mixing from thermal power entering or leaving tank\n    soc_min_fraction::Float64 = 0.1 # Minimum allowable TES thermal state of charge\n    soc_init_fraction::Float64 = 0.5 # TES thermal state of charge at first hour of optimization\n    installed_cost_per_gal::Float64 = 1.50 # Thermal energy-based cost of TES (e.g. volume of the tank)\n    thermal_decay_rate_fraction::Float64 = 0.0004 # Thermal loss (gain) rate as a fraction of energy storage capacity, per hour (frac*energy_capacity/hr = kw_thermal)\n    om_cost_per_gal::Float64 = 0.0 # Yearly fixed O&M cost dependent on storage energy size\n    macrs_option_years::Int = 7\n    macrs_bonus_fraction::Float64 = 0.6\n    macrs_itc_reduction::Float64 = 0.5\n    total_itc_fraction::Float64 = 0.3\n    total_rebate_per_kwh::Float64 = 0.0\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#HeatingLoad","page":"REopt Inputs","title":"HeatingLoad","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.HeatingLoad","category":"page"},{"location":"reopt/inputs/#REopt.HeatingLoad","page":"REopt Inputs","title":"REopt.HeatingLoad","text":"HeatingLoad is a base function for the types of heating load inputs with the following keys and default values:\n\n    load_type::String = \"\",  # Valid options are space_heating for SpaceHeatingLoad, domestic_hot_water for DomesticHotWaterLoad, and process_heat for ProcessHeatLoad\n    doe_reference_name::String = \"\",  # For SpaceHeatingLoad and DomesticHotWaterLoad\n    blended_doe_reference_names::Array{String, 1} = String[],  # For SpaceHeatingLoad and DomesticHotWaterLoad\n    blended_doe_reference_percents::Array{<:Real,1} = Real[],  # For SpaceHeatingLoad and DomesticHotWaterLoad\n    industrial_reference_name::String = \"\",  # For ProcessHeatLoad\n    blended_industrial_reference_names::Array{String, 1} = String[],  # For ProcessHeatLoad\n    blended_industrial_reference_percents::Array{<:Real,1} = Real[],  # For ProcessHeatLoad\n    city::String = \"\",\n    year::Union{Int, Nothing} = doe_reference_name ≠ \"\" || blended_doe_reference_names ≠ String[] || industrial_reference_name ≠ \"\" || blended_industrial_reference_names ≠ String[] ? 2017 : nothing, # CRB profiles are 2017 by default. If providing load profile, specify year of data.\n    annual_mmbtu::Union{Real, Nothing} = nothing,\n    monthly_mmbtu::Array{<:Real,1} = Real[],\n    addressable_load_fraction::Any = 1.0,  # Fraction of input fuel load which is addressable by heating technologies. Can be a scalar or vector with length aligned with use of monthly_mmbtu or fuel_loads_mmbtu_per_hour.\n    fuel_loads_mmbtu_per_hour::Array{<:Real,1} = Real[], # Vector of space heating fuel loads [mmbtu/hr]. Length must equal 8760 * `Settings.time_steps_per_hour`\n    normalize_and_scale_load_profile_input::Bool = false,  # Takes fuel_loads_mmbtu_per_hour and normalizes and scales it to annual_mmbtu or monthly_mmbtu \n    existing_boiler_efficiency::Real = NaN\n\nThere are different ways to define a heating load:\n\nA time-series via the fuel_loads_mmbtu_per_hour,\nScaling a DOE Commercial Reference Building (CRB) or industrial reference profile or a blend of profiles to either the annual_mmbtu or monthly_mmbtu values;\nUsing the same doe_reference_name or blended_doe_reference_names from the ElectricLoad.\nA time-series via the fuel_loads_mmbtu_per_hour along with annual_mmbtu or monthly_mmbtu with normalize_and_scale_load_profile_input=true\n\nWhen using an ElectricLoad defined from a doe_reference_name or blended_doe_reference_names  one only needs to provide an empty Dict in the scenario JSON to add a SpaceHeatingLoad to a  Scenario, i.e.:\n\n...\n\"ElectricLoad\": {\"doe_reference_name\": \"MidriseApartment\"},\n\"SpaceHeatingLoad\" : {},\n...\n\nIn this case the values provided for doe_reference_name, or  blended_doe_reference_names and  blended_doe_reference_percents are copied from the ElectricLoad to the the particular HeatingLoad type.\n\n!!! note for all heating loads     Hot water, space heating, and process heat \"load\" inputs are in terms of energy input required (boiler fuel),      not the actual end use thermal energy demand. The fuel energy is multiplied by the existingboilerefficiency to get the actual energy      demand.\n\n\n\n\n\n","category":"function"},{"location":"reopt/inputs/#FlexibleHVAC","page":"REopt Inputs","title":"FlexibleHVAC","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.FlexibleHVAC","category":"page"},{"location":"reopt/inputs/#REopt.FlexibleHVAC","page":"REopt Inputs","title":"REopt.FlexibleHVAC","text":"FlexibleHVAC is an optional REopt input with the following keys and default values: \n\n    system_matrix::AbstractMatrix{Float64}  # N x N, with N states (temperatures in RC network)\n    input_matrix::AbstractMatrix{Float64}  # N x M, with M inputs\n    exogenous_inputs::AbstractMatrix{Float64}  # M x T, with T time steps\n    control_node::Int64\n    initial_temperatures::AbstractVector{Float64}\n    temperature_upper_bound_degC::Union{Real, Nothing}\n    temperature_lower_bound_degC::Union{Real, Nothing}\n    installed_cost::Float64\n\nEvery model with FlexibleHVAC includes a preprocessing step to calculate the business-as-usual (BAU) cost of meeting the thermal loads using a dead-band controller. The BAU cost is then used in the  binary decision for purchasing the FlexibleHVAC system: if the FlexibleHVAC system is purchased then the heating and cooling costs are determined by the HVAC dispatch that minimizes the lifecycle cost of energy. If the FlexibleHVAC system is not purchased then the BAU heating and cooling costs must be paid.\n\nThere are two construction methods for FlexibleHVAC, which depend on whether or not the data was  loaded in from a JSON file. The issue with data from JSON is that the vector-of-vectors from the JSON  file must be appropriately converted to Julia Matrices. When loading in a Scenario from JSON that  includes a FlexibleHVAC model, if you include the flex_hvac_from_json argument to the Scenario  constructor then the conversion to Matrices will be done appropriately. \n\nnote: Note\nAt least one of the inputs for temperature_upper_bound_degC or temperature_lower_bound_degC must be provided to evaluate the FlexibleHVAC option. For example, if only temperature_lower_bound_degC is provided then only a heating system will be evaluated. Also, the heating system will only be used (or purchased) if the exogenous_inputs lead to the temperature at the control_node going below the temperature_lower_bound_degC.\n\nnote: Note\nThe ExistingChiller is electric and so its operating cost is determined by the ElectricTariff.\n\nnote: Note\nBAU heating costs will be determined by the ExistingBoiler inputs, includingfuel_cost_per_mmbtu.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ExistingChiller","page":"REopt Inputs","title":"ExistingChiller","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ExistingChiller","category":"page"},{"location":"reopt/inputs/#REopt.ExistingChiller","page":"REopt Inputs","title":"REopt.ExistingChiller","text":"ExistingChiller is an optional REopt input with the following keys and default values:\n\n    loads_kw_thermal::Vector{<:Real},\n    cop::Union{Real, Nothing} = nothing,\n    max_thermal_factor_on_peak_load::Real=1.25\n    retire_in_optimal::Bool = false  # Do NOT use in the optimal case (still used in BAU)\n\nnote: Max ExistingChiller size\nThe maximum size [kW] of the ExistingChiller will be set based on the peak thermal load as follows:max_kw = maximum(loads_kw_thermal) * max_thermal_factor_on_peak_load\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#GHP","page":"REopt Inputs","title":"GHP","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.GHP","category":"page"},{"location":"reopt/inputs/#SteamTurbine","page":"REopt Inputs","title":"SteamTurbine","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.SteamTurbine","category":"page"},{"location":"reopt/inputs/#REopt.SteamTurbine","page":"REopt Inputs","title":"REopt.SteamTurbine","text":"SteamTurbine is an optional REopt input with the following keys and default values:\n\n    size_class::Union{Int64, Nothing} = nothing\n    min_kw::Float64 = 0.0\n    max_kw::Float64 = 1.0e9\n    electric_produced_to_thermal_consumed_ratio::Float64 = NaN\n    thermal_produced_to_thermal_consumed_ratio::Float64 = NaN\n    is_condensing::Bool = false\n    inlet_steam_pressure_psig::Float64 = NaN\n    inlet_steam_temperature_degF::Float64 = NaN\n    inlet_steam_superheat_degF::Float64 = 0.0\n    outlet_steam_pressure_psig::Float64 = NaN\n    outlet_steam_min_vapor_fraction::Float64 = 0.8  # Minimum practical vapor fraction of steam at the exit of the steam turbine\n    isentropic_efficiency::Float64 = NaN\n    gearbox_generator_efficiency::Float64 = NaN  # Combined gearbox (if applicable) and electric motor/generator efficiency\n    net_to_gross_electric_ratio::Float64 = NaN  # Efficiency factor to account for auxiliary loads such as pumps, controls, lights, etc\n    installed_cost_per_kw::Float64 = NaN   # Installed cost based on electric power capacity\n    om_cost_per_kw::Float64 = 0.0  # Fixed O&M cost based on electric power capacity\n    om_cost_per_kwh::Float64 = NaN  # Variable O&M based on electric energy produced\n\n    can_net_meter::Bool = false\n    can_wholesale::Bool = false\n    can_export_beyond_nem_limit::Bool = false\n    can_curtail::Bool = false\n    can_serve_dhw::Bool = true\n    can_serve_space_heating::Bool = true\n    can_serve_process_heat::Bool = true\n\n    macrs_option_years::Int = 0\n    macrs_bonus_fraction::Float64 = 0.0    \n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricHeater","page":"REopt Inputs","title":"ElectricHeater","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ElectricHeater","category":"page"},{"location":"reopt/inputs/#REopt.ElectricHeater","page":"REopt Inputs","title":"REopt.ElectricHeater","text":"ElectricHeater\n\nIf a user provides the ElectricHeater key then the optimal scenario has the option to purchase  this new ElectricHeater to meet the heating load in addition to using the ExistingBoiler  to meet the heating load. \n\nfunction ElectricHeater(;\n    min_mmbtu_per_hour::Real = 0.0, # Minimum thermal power size\n    max_mmbtu_per_hour::Real = BIG_NUMBER, # Maximum thermal power size\n    installed_cost_per_mmbtu_per_hour::Union{Real, nothing} = nothing, # Thermal power-based cost\n    om_cost_per_mmbtu_per_hour::Union{Real, nothing} = nothing, # Thermal power-based fixed O&M cost\n    macrs_option_years::Int = 0, # MACRS schedule for financial analysis. Set to zero to disable\n    macrs_bonus_fraction::Real = 0.0, # Fraction of upfront project costs to depreciate under MACRS\n    can_supply_steam_turbine::Union{Bool, nothing} = nothing # If the boiler can supply steam to the steam turbine for electric production\n    cop::Union{Real, nothing} = nothing # COP of the heating (i.e., thermal produced / electricity consumed)\n    can_serve_dhw::Bool = true # If electric heater can supply heat to the domestic hot water load\n    can_serve_space_heating::Bool = true # If electric heater can supply heat to the space heating load\n    can_serve_process_heat::Bool = true # If electric heater can supply heat to the process heating load\n)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ASHP","page":"REopt Inputs","title":"ASHP","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REopt.ASHP","category":"page"},{"location":"reopt/inputs/#REopt.ASHP","page":"REopt Inputs","title":"REopt.ASHP","text":"ASHPSpaceHeater\n\nIf a user provides the ASHPSpaceHeater key then the optimal scenario has the option to purchase  this new ASHP to meet the heating load in addition to using the ExistingBoiler to meet the heating load. \n\nASHPSpaceHeater has the following attributes: \n\n    min_kw::Real # Minimum thermal power size\n    max_kw::Real # Maximum thermal power size\n    min_allowable_kw::Real # Minimum nonzero thermal power size if included\n    sizing_factor::Real # Size multiplier of system, relative that of the max load given by dispatch profile\n    installed_cost_per_kw::Real # Thermal power-based cost\n    om_cost_per_kw::Real # Thermal power-based fixed O&M cost\n    macrs_option_years::Int # MACRS schedule for financial analysis. Set to zero to disable\n    macrs_bonus_fraction::Real # Fraction of upfront project costs to depreciate under MACRS\n    heating_cop::Array{<:Real,1} # COP of the heating (i.e., thermal produced / electricity consumed)\n    cooling_cop::Array{<:Real,1} # COP of the cooling (i.e., thermal produced / electricity consumed)\n    heating_cf::Array{<:Real,1} # ASHP's heating capacity factor curves\n    cooling_cf::Array{<:Real,1} # ASHP's cooling capacity factor curves\n    can_serve_cooling::Bool # If ASHP can supply heat to the cooling load\n    force_into_system::Bool # force into system to serve all space heating loads if true\n    force_dispatch::Bool # force ASHP to meet load or maximize output if true\n    back_up_temp_threshold_degF::Real # Degree in F that system switches from ASHP to resistive heater \n    avoided_capex_by_ashp_present_value::Real # avoided capital expenditure due to presence of ASHP system vs. defaults heating and cooling techs\n    max_ton::Real # maximum allowable thermal power (tons) \n\n\n\n\n\n\n","category":"type"},{"location":"developer/concept/#Design-Concepts-for-the-REopt-Module","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"","category":"section"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"At a high level each REopt model consists of four major components:","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"The Scenario as defined by the user's inputs and default values.\nThe REoptInputs, which convert the Scenario into the necessary values for the REopt mathematical program.\nThe REopt Model (built here), which includes all the constraints and the objective function that are built using the REoptInputs\nAnd the results, which are returned to the user and derived from the optimal solution of the REopt Model.","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"The REopt Model is built via the build_reopt! method. However, the run_reopt method includes build_reopt! within it so typically a user does not need to directly call build_reopt! (unless they wish to modify the model before solving it, eg. by adding a constraint).","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"run_reopt is the main interface for users.","category":"page"},{"location":"developer/concept/#Technology-size-constraints","page":"Design Concepts for the REopt Module","title":"Technology size constraints","text":"","category":"section"},{"location":"developer/concept/#Upper-size-limits","page":"Design Concepts for the REopt Module","title":"Upper size limits","text":"","category":"section"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"The max_kw input value for any technology is considered to be the maximum additional capacity that may be installed beyond the existing_kw. Note also that the Site space constraints (roof_squarefeet and land_acres) for PV technologies can be less than the provided max_kw value.","category":"page"},{"location":"developer/concept/#Lower-size-limits","page":"Design Concepts for the REopt Module","title":"Lower size limits","text":"","category":"section"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"The min_kw input value for any technology sets the lower bound on the capacity. If min_kw is non-zero then the model will be forced to choose at least that system size. The min_kw value is set equal to the existing_kw value in the Business As Usual scenario.","category":"page"},{"location":"developer/concept/#Business-As-Usual-Scenario","page":"Design Concepts for the REopt Module","title":"Business As Usual Scenario","text":"","category":"section"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"In order to calculate the Net Present Value of the optimal solution, as well as other baseline metrics, one can optionally run the Business As Usual (BAU) scenario. When an array of JuMP.Models is provided to run_reopt the BAU scenario is also run. For example:","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"m1 = Model(optimizer_with_attributes(Xpress.Optimizer, \"OUTPUTLOG\" => 0))\nm2 = Model(optimizer_with_attributes(Xpress.Optimizer, \"OUTPUTLOG\" => 0))\nresults = run_reopt([m1,m2], \"./scenarios/pv_storage.json\")","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"The BAU scenario is created by modifying the REoptInputs (created from the user's Scenario). In the BAU scenario we have the following assumptions:","category":"page"},{"location":"developer/concept/","page":"Design Concepts for the REopt Module","title":"Design Concepts for the REopt Module","text":"Each existing technology has zero capital cost, but does have operations and maintenance costs.\nThe ElectricTariff, Financial, Site, ElectricLoad, and ElectricUtility inputs are the same as the optimal case.\nThe min_kw and max_kw values are set to the existing_kw value.","category":"page"}]
}
